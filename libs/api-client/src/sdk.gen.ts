// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetClassificationData, GetClassificationResponse, GetClassificationError, PostClassificationData, PostClassificationResponse, PostClassificationError, DeleteClassificationByClassificationIdData, DeleteClassificationByClassificationIdResponse, DeleteClassificationByClassificationIdError, GetClassificationByClassificationIdData, GetClassificationByClassificationIdResponse, GetClassificationByClassificationIdError, PatchClassificationByClassificationIdData, PatchClassificationByClassificationIdResponse, PatchClassificationByClassificationIdError, GetMeldingData, GetMeldingResponse, GetMeldingError, PostMeldingData, PostMeldingResponse, PostMeldingError, GetMeldingByMeldingIdData, GetMeldingByMeldingIdResponse, GetMeldingByMeldingIdError, PatchMeldingByMeldingIdData, PatchMeldingByMeldingIdResponse, PatchMeldingByMeldingIdError, GetMeldingByMeldingIdMelderData, GetMeldingByMeldingIdMelderResponse, GetMeldingByMeldingIdMelderError, PutMeldingByMeldingIdAnswerQuestionsData, PutMeldingByMeldingIdAnswerQuestionsResponse, PutMeldingByMeldingIdAddAttachmentsData, PutMeldingByMeldingIdAddAttachmentsResponse, PutMeldingByMeldingIdSubmitLocationData, PutMeldingByMeldingIdSubmitLocationResponse, PutMeldingByMeldingIdSubmitData, PutMeldingByMeldingIdSubmitResponse, PutMeldingByMeldingIdProcessData, PutMeldingByMeldingIdProcessResponse, PutMeldingByMeldingIdCompleteData, PutMeldingByMeldingIdCompleteResponse, PostMeldingByMeldingIdQuestionByQuestionIdData, PostMeldingByMeldingIdQuestionByQuestionIdResponse, PostMeldingByMeldingIdAttachmentData, PostMeldingByMeldingIdAttachmentResponse, PostMeldingByMeldingIdAttachmentError, GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadData, GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadError, GetMeldingByMeldingIdAttachmentsData, GetMeldingByMeldingIdAttachmentsResponse, GetMeldingByMeldingIdAttachmentsError, DeleteMeldingByMeldingIdAttachmentByAttachmentIdData, DeleteMeldingByMeldingIdAttachmentByAttachmentIdError, PostMeldingByMeldingIdLocationData, PostMeldingByMeldingIdLocationResponse, PostMeldingByMeldingIdLocationError, PostMeldingByMeldingIdContactData, PostMeldingByMeldingIdContactResponse, PostMeldingByMeldingIdContactError, PutMeldingByMeldingIdAddContactInfoData, PutMeldingByMeldingIdAddContactInfoResponse, GetMeldingByMeldingIdAnswersData, GetMeldingByMeldingIdAnswersResponse, GetMeldingByMeldingIdAnswersError, GetUserData, GetUserResponse, GetUserError, PostUserData, PostUserResponse, PostUserError, DeleteUserByUserIdData, DeleteUserByUserIdResponse, DeleteUserByUserIdError, GetUserByUserIdData, GetUserByUserIdResponse, GetUserByUserIdError, PatchUserByUserIdData, PatchUserByUserIdResponse, PatchUserByUserIdError, GetFormData, GetFormResponse, GetFormError, PostFormData, PostFormResponse, PostFormError, DeleteFormByFormIdData, DeleteFormByFormIdResponse, DeleteFormByFormIdError, GetFormByFormIdData, GetFormByFormIdResponse, GetFormByFormIdError, PutFormByFormIdData, PutFormByFormIdResponse, PutFormByFormIdError, GetFormClassificationByClassificationIdData, GetFormClassificationByClassificationIdResponse, GetFormClassificationByClassificationIdError, GetStaticFormByStaticFormIdData, GetStaticFormByStaticFormIdResponse, GetStaticFormByStaticFormIdError, PutStaticFormByStaticFormIdData, PutStaticFormByStaticFormIdResponse, PutStaticFormByStaticFormIdError, GetStaticFormData, GetStaticFormResponse, GetStaticFormError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Classification:List
 */
export const getClassification = <ThrowOnError extends boolean = false>(options?: Options<GetClassificationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetClassificationResponse, GetClassificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/classification/',
        ...options
    });
};

/**
 * Classification:Create
 */
export const postClassification = <ThrowOnError extends boolean = false>(options: Options<PostClassificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostClassificationResponse, PostClassificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/classification/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Classification:Delete
 */
export const deleteClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<DeleteClassificationByClassificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteClassificationByClassificationIdResponse, DeleteClassificationByClassificationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/classification/{classification_id}',
        ...options
    });
};

/**
 * Classification:Retrieve
 */
export const getClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<GetClassificationByClassificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClassificationByClassificationIdResponse, GetClassificationByClassificationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/classification/{classification_id}',
        ...options
    });
};

/**
 * Classification:Update
 */
export const patchClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<PatchClassificationByClassificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchClassificationByClassificationIdResponse, PatchClassificationByClassificationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/classification/{classification_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Melding:List
 */
export const getMelding = <ThrowOnError extends boolean = false>(options?: Options<GetMeldingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeldingResponse, GetMeldingError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/melding/',
        ...options
    });
};

/**
 * Melding:Create
 */
export const postMelding = <ThrowOnError extends boolean = false>(options: Options<PostMeldingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeldingResponse, PostMeldingError, ThrowOnError>({
        url: '/melding/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Melding:Retrieve
 */
export const getMeldingByMeldingId = <ThrowOnError extends boolean = false>(options: Options<GetMeldingByMeldingIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeldingByMeldingIdResponse, GetMeldingByMeldingIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/melding/{melding_id}',
        ...options
    });
};

/**
 * Melding:Update
 */
export const patchMeldingByMeldingId = <ThrowOnError extends boolean = false>(options: Options<PatchMeldingByMeldingIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchMeldingByMeldingIdResponse, PatchMeldingByMeldingIdError, ThrowOnError>({
        url: '/melding/{melding_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Melding:Retrieve Melder
 */
export const getMeldingByMeldingIdMelder = <ThrowOnError extends boolean = false>(options: Options<GetMeldingByMeldingIdMelderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeldingByMeldingIdMelderResponse, GetMeldingByMeldingIdMelderError, ThrowOnError>({
        url: '/melding/{melding_id}/melder',
        ...options
    });
};

/**
 * Melding:Answer Questions
 */
export const putMeldingByMeldingIdAnswerQuestions = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdAnswerQuestionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdAnswerQuestionsResponse, unknown, ThrowOnError>({
        url: '/melding/{melding_id}/answer_questions',
        ...options
    });
};

/**
 * Melding:Add-Attachments
 */
export const putMeldingByMeldingIdAddAttachments = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdAddAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdAddAttachmentsResponse, unknown, ThrowOnError>({
        url: '/melding/{melding_id}/add_attachments',
        ...options
    });
};

/**
 * Melding:Submit-Location
 */
export const putMeldingByMeldingIdSubmitLocation = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdSubmitLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdSubmitLocationResponse, unknown, ThrowOnError>({
        url: '/melding/{melding_id}/submit_location',
        ...options
    });
};

/**
 * Melding:Submit
 */
export const putMeldingByMeldingIdSubmit = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdSubmitResponse, unknown, ThrowOnError>({
        url: '/melding/{melding_id}/submit',
        ...options
    });
};

/**
 * Melding:Process
 */
export const putMeldingByMeldingIdProcess = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdProcessResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/melding/{melding_id}/process',
        ...options
    });
};

/**
 * Melding:Complete
 */
export const putMeldingByMeldingIdComplete = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdCompleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/melding/{melding_id}/complete',
        ...options
    });
};

/**
 * Melding:Answer-Question
 */
export const postMeldingByMeldingIdQuestionByQuestionId = <ThrowOnError extends boolean = false>(options: Options<PostMeldingByMeldingIdQuestionByQuestionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeldingByMeldingIdQuestionByQuestionIdResponse, unknown, ThrowOnError>({
        url: '/melding/{melding_id}/question/{question_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Melding:Attachment
 */
export const postMeldingByMeldingIdAttachment = <ThrowOnError extends boolean = false>(options: Options<PostMeldingByMeldingIdAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeldingByMeldingIdAttachmentResponse, PostMeldingByMeldingIdAttachmentError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/melding/{melding_id}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Melding:Attachment-Download
 */
export const getMeldingByMeldingIdAttachmentByAttachmentIdDownload = <ThrowOnError extends boolean = false>(options: Options<GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadError, ThrowOnError>({
        url: '/melding/{melding_id}/attachment/{attachment_id}/download',
        ...options
    });
};

/**
 * Melding:Attachments
 */
export const getMeldingByMeldingIdAttachments = <ThrowOnError extends boolean = false>(options: Options<GetMeldingByMeldingIdAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeldingByMeldingIdAttachmentsResponse, GetMeldingByMeldingIdAttachmentsError, ThrowOnError>({
        url: '/melding/{melding_id}/attachments',
        ...options
    });
};

/**
 * Melding:Attachment-Delete
 */
export const deleteMeldingByMeldingIdAttachmentByAttachmentId = <ThrowOnError extends boolean = false>(options: Options<DeleteMeldingByMeldingIdAttachmentByAttachmentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteMeldingByMeldingIdAttachmentByAttachmentIdError, ThrowOnError>({
        url: '/melding/{melding_id}/attachment/{attachment_id}',
        ...options
    });
};

/**
 * Melding:Location-Add
 */
export const postMeldingByMeldingIdLocation = <ThrowOnError extends boolean = false>(options: Options<PostMeldingByMeldingIdLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeldingByMeldingIdLocationResponse, PostMeldingByMeldingIdLocationError, ThrowOnError>({
        url: '/melding/{melding_id}/location',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Melding:Contact-Add
 */
export const postMeldingByMeldingIdContact = <ThrowOnError extends boolean = false>(options: Options<PostMeldingByMeldingIdContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMeldingByMeldingIdContactResponse, PostMeldingByMeldingIdContactError, ThrowOnError>({
        url: '/melding/{melding_id}/contact',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Melding:Add-Contact-Info
 */
export const putMeldingByMeldingIdAddContactInfo = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdAddContactInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMeldingByMeldingIdAddContactInfoResponse, unknown, ThrowOnError>({
        url: '/melding/{melding_id}/add_contact_info',
        ...options
    });
};

/**
 * Melding:Answers
 */
export const getMeldingByMeldingIdAnswers = <ThrowOnError extends boolean = false>(options: Options<GetMeldingByMeldingIdAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeldingByMeldingIdAnswersResponse, GetMeldingByMeldingIdAnswersError, ThrowOnError>({
        url: '/melding/{melding_id}/answers',
        ...options
    });
};

/**
 * User:List
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/',
        ...options
    });
};

/**
 * User:Create
 */
export const postUser = <ThrowOnError extends boolean = false>(options: Options<PostUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserResponse, PostUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User:Delete
 */
export const deleteUserByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserByUserIdResponse, DeleteUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/{user_id}',
        ...options
    });
};

/**
 * User:Retrieve
 */
export const getUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByUserIdResponse, GetUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/{user_id}',
        ...options
    });
};

/**
 * User:Update
 */
export const patchUserByUserId = <ThrowOnError extends boolean = false>(options: Options<PatchUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchUserByUserIdResponse, PatchUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Form:List
 */
export const getForm = <ThrowOnError extends boolean = false>(options?: Options<GetFormData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFormResponse, GetFormError, ThrowOnError>({
        url: '/form/',
        ...options
    });
};

/**
 * Form:Create
 */
export const postForm = <ThrowOnError extends boolean = false>(options: Options<PostFormData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostFormResponse, PostFormError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Form:Delete
 */
export const deleteFormByFormId = <ThrowOnError extends boolean = false>(options: Options<DeleteFormByFormIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFormByFormIdResponse, DeleteFormByFormIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/{form_id}',
        ...options
    });
};

/**
 * Form:Retrieve
 */
export const getFormByFormId = <ThrowOnError extends boolean = false>(options: Options<GetFormByFormIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFormByFormIdResponse, GetFormByFormIdError, ThrowOnError>({
        url: '/form/{form_id}',
        ...options
    });
};

/**
 * Form:Update
 */
export const putFormByFormId = <ThrowOnError extends boolean = false>(options: Options<PutFormByFormIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutFormByFormIdResponse, PutFormByFormIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/{form_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Form:Classification
 */
export const getFormClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<GetFormClassificationByClassificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFormClassificationByClassificationIdResponse, GetFormClassificationByClassificationIdError, ThrowOnError>({
        url: '/form/classification/{classification_id}',
        ...options
    });
};

/**
 * Static-Form:Retrieve
 */
export const getStaticFormByStaticFormId = <ThrowOnError extends boolean = false>(options: Options<GetStaticFormByStaticFormIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStaticFormByStaticFormIdResponse, GetStaticFormByStaticFormIdError, ThrowOnError>({
        url: '/static-form/{static_form_id}',
        ...options
    });
};

/**
 * Static-Form:Update
 */
export const putStaticFormByStaticFormId = <ThrowOnError extends boolean = false>(options: Options<PutStaticFormByStaticFormIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutStaticFormByStaticFormIdResponse, PutStaticFormByStaticFormIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/static-form/{static_form_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Static-Form:List
 */
export const getStaticForm = <ThrowOnError extends boolean = false>(options?: Options<GetStaticFormData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStaticFormResponse, GetStaticFormError, ThrowOnError>({
        url: '/static-form/',
        ...options
    });
};