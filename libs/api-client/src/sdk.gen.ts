// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostClassificationData, PostClassificationResponse, GetClassificationData, GetClassificationResponse, GetClassificationByClassificationIdData, GetClassificationByClassificationIdResponse, PatchClassificationByClassificationIdData, PatchClassificationByClassificationIdResponse, DeleteClassificationByClassificationIdData, DeleteClassificationByClassificationIdResponse, PostMeldingData, PostMeldingResponse, GetMeldingData, GetMeldingResponse, GetMeldingByMeldingIdData, GetMeldingByMeldingIdResponse, PatchMeldingByMeldingIdData, PatchMeldingByMeldingIdResponse, PutMeldingByMeldingIdAnswerQuestionsData, PutMeldingByMeldingIdAnswerQuestionsResponse, PutMeldingByMeldingIdAddAttachmentsData, PutMeldingByMeldingIdAddAttachmentsResponse, PutMeldingByMeldingIdSubmitLocationData, PutMeldingByMeldingIdSubmitLocationResponse, PutMeldingByMeldingIdProcessData, PutMeldingByMeldingIdProcessResponse, PutMeldingByMeldingIdCompleteData, PutMeldingByMeldingIdCompleteResponse, PostMeldingByMeldingIdQuestionByQuestionIdData, PostMeldingByMeldingIdQuestionByQuestionIdResponse, PostMeldingByMeldingIdAttachmentData, PostMeldingByMeldingIdAttachmentResponse, GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadData, GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponse, GetMeldingByMeldingIdAttachmentsData, GetMeldingByMeldingIdAttachmentsResponse, DeleteMeldingByMeldingIdAttachmentByAttachmentIdData, DeleteMeldingByMeldingIdAttachmentByAttachmentIdResponse, PostMeldingByMeldingIdLocationData, PostMeldingByMeldingIdLocationResponse, PostMeldingByMeldingIdContactData, PostMeldingByMeldingIdContactResponse, PutMeldingByMeldingIdAddContactInfoData, PutMeldingByMeldingIdAddContactInfoResponse, PostUserData, PostUserResponse, GetUserData, GetUserResponse, GetUserByUserIdData, GetUserByUserIdResponse, DeleteUserByUserIdData, DeleteUserByUserIdResponse, PatchUserByUserIdData, PatchUserByUserIdResponse, GetFormData, GetFormResponse, PostFormData, PostFormResponse, GetFormByFormIdData, GetFormByFormIdResponse, PutFormByFormIdData, PutFormByFormIdResponse, DeleteFormByFormIdData, DeleteFormByFormIdResponse, GetFormClassificationByClassificationIdData, GetFormClassificationByClassificationIdResponse, GetStaticFormByStaticFormIdData, GetStaticFormByStaticFormIdResponse, PutStaticFormByStaticFormIdData, PutStaticFormByStaticFormIdResponse, GetStaticFormData, GetStaticFormResponse } from './types.gen';

/**
 * Classification:Create
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ClassificationOutput Successful Response
 * @throws ApiError
 */
export const postClassification = (data: PostClassificationData): CancelablePromise<PostClassificationResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/classification/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            409: 'Conflict, a uniqueness error occurred',
            422: 'Validation Error'
        }
    });
};

/**
 * Classification:List
 * @param data The data for the request.
 * @param data.limit
 * @param data.offset
 * @param data.sort
 * @returns ClassificationOutput Successful Response
 * @throws ApiError
 */
export const getClassification = (data: GetClassificationData = {}): CancelablePromise<GetClassificationResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/classification/',
        query: {
            limit: data.limit,
            offset: data.offset,
            sort: data.sort
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            422: 'Validation Error'
        }
    });
};

/**
 * Classification:Retrieve
 * @param data The data for the request.
 * @param data.classificationId The classification id.
 * @returns ClassificationOutput Successful Response
 * @throws ApiError
 */
export const getClassificationByClassificationId = (data: GetClassificationByClassificationIdData): CancelablePromise<GetClassificationByClassificationIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/classification/{classification_id}',
        path: {
            classification_id: data.classificationId
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Classification:Update
 * @param data The data for the request.
 * @param data.classificationId The classification id.
 * @param data.requestBody
 * @returns ClassificationOutput Successful Response
 * @throws ApiError
 */
export const patchClassificationByClassificationId = (data: PatchClassificationByClassificationIdData): CancelablePromise<PatchClassificationByClassificationIdResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/classification/{classification_id}',
        path: {
            classification_id: data.classificationId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            409: 'Conflict, a uniqueness error occurred',
            422: 'Validation Error'
        }
    });
};

/**
 * Classification:Delete
 * @param data The data for the request.
 * @param data.classificationId The classification id.
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteClassificationByClassificationId = (data: DeleteClassificationByClassificationIdData): CancelablePromise<DeleteClassificationByClassificationIdResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/classification/{classification_id}',
        path: {
            classification_id: data.classificationId
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Create
 * @param data The data for the request.
 * @param data.requestBody
 * @returns MeldingCreateOutput Successful Response
 * @throws ApiError
 */
export const postMelding = (data: PostMeldingData): CancelablePromise<PostMeldingResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/melding/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:List
 * @param data The data for the request.
 * @param data.limit
 * @param data.offset
 * @param data.sort
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const getMelding = (data: GetMeldingData = {}): CancelablePromise<GetMeldingResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/melding/',
        query: {
            limit: data.limit,
            offset: data.offset,
            sort: data.sort
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Retrieve
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const getMeldingByMeldingId = (data: GetMeldingByMeldingIdData): CancelablePromise<GetMeldingByMeldingIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/melding/{melding_id}',
        path: {
            melding_id: data.meldingId
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Update
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @param data.requestBody
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const patchMeldingByMeldingId = (data: PatchMeldingByMeldingIdData): CancelablePromise<PatchMeldingByMeldingIdResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/melding/{melding_id}',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Answer Questions
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const putMeldingByMeldingIdAnswerQuestions = (data: PutMeldingByMeldingIdAnswerQuestionsData): CancelablePromise<PutMeldingByMeldingIdAnswerQuestionsResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/melding/{melding_id}/answer_questions',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        errors: {
            400: 'Transition not allowed from current state',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * Melding:Add-Attachments
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const putMeldingByMeldingIdAddAttachments = (data: PutMeldingByMeldingIdAddAttachmentsData): CancelablePromise<PutMeldingByMeldingIdAddAttachmentsResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/melding/{melding_id}/add_attachments',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        errors: {
            400: 'Transition not allowed from current state',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * Melding:Submit-Location
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const putMeldingByMeldingIdSubmitLocation = (data: PutMeldingByMeldingIdSubmitLocationData): CancelablePromise<PutMeldingByMeldingIdSubmitLocationResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/melding/{melding_id}/submit_location',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        errors: {
            400: 'Transition not allowed from current state',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * Melding:Process
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const putMeldingByMeldingIdProcess = (data: PutMeldingByMeldingIdProcessData): CancelablePromise<PutMeldingByMeldingIdProcessResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/melding/{melding_id}/process',
        path: {
            melding_id: data.meldingId
        },
        errors: {
            400: 'Transition not allowed from current state',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * Melding:Complete
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const putMeldingByMeldingIdComplete = (data: PutMeldingByMeldingIdCompleteData): CancelablePromise<PutMeldingByMeldingIdCompleteResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/melding/{melding_id}/complete',
        path: {
            melding_id: data.meldingId
        },
        errors: {
            400: 'Transition not allowed from current state',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * Melding:Answer-Question
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.questionId The id of the question.
 * @param data.token The token of the melding.
 * @param data.requestBody
 * @returns AnswerOutput Successful Response
 * @throws ApiError
 */
export const postMeldingByMeldingIdQuestionByQuestionId = (data: PostMeldingByMeldingIdQuestionByQuestionIdData): CancelablePromise<PostMeldingByMeldingIdQuestionByQuestionIdResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/melding/{melding_id}/question/{question_id}',
        path: {
            melding_id: data.meldingId,
            question_id: data.questionId
        },
        query: {
            token: data.token
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * Melding:Attachment
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @param data.formData
 * @returns AttachmentOutput Successful Response
 * @throws ApiError
 */
export const postMeldingByMeldingIdAttachment = (data: PostMeldingByMeldingIdAttachmentData): CancelablePromise<PostMeldingByMeldingIdAttachmentResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/melding/{melding_id}/attachment',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        formData: data.formData,
        mediaType: 'multipart/form-data',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            413: 'Uploading attachment that is too large.',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Attachment-Download
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.attachmentId The id of the attachment.
 * @param data.token The token of the melding.
 * @param data.type The type of the attachment to download.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getMeldingByMeldingIdAttachmentByAttachmentIdDownload = (data: GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadData): CancelablePromise<GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/melding/{melding_id}/attachment/{attachment_id}/download',
        path: {
            melding_id: data.meldingId,
            attachment_id: data.attachmentId
        },
        query: {
            token: data.token,
            type: data.type
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Attachments
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @returns AttachmentOutput Successful Response
 * @throws ApiError
 */
export const getMeldingByMeldingIdAttachments = (data: GetMeldingByMeldingIdAttachmentsData): CancelablePromise<GetMeldingByMeldingIdAttachmentsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/melding/{melding_id}/attachments',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Attachment-Delete
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.attachmentId The id of the attachment.
 * @param data.token The token of the melding.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteMeldingByMeldingIdAttachmentByAttachmentId = (data: DeleteMeldingByMeldingIdAttachmentByAttachmentIdData): CancelablePromise<DeleteMeldingByMeldingIdAttachmentByAttachmentIdResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/melding/{melding_id}/attachment/{attachment_id}',
        path: {
            melding_id: data.meldingId,
            attachment_id: data.attachmentId
        },
        query: {
            token: data.token
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Location-Add
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @param data.requestBody
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const postMeldingByMeldingIdLocation = (data: PostMeldingByMeldingIdLocationData): CancelablePromise<PostMeldingByMeldingIdLocationResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/melding/{melding_id}/location',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Contact-Add
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @param data.requestBody
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const postMeldingByMeldingIdContact = (data: PostMeldingByMeldingIdContactData): CancelablePromise<PostMeldingByMeldingIdContactResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/melding/{melding_id}/contact',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Melding:Add-Contact-Info
 * @param data The data for the request.
 * @param data.meldingId The id of the melding.
 * @param data.token The token of the melding.
 * @returns MeldingOutput Successful Response
 * @throws ApiError
 */
export const putMeldingByMeldingIdAddContactInfo = (data: PutMeldingByMeldingIdAddContactInfoData): CancelablePromise<PutMeldingByMeldingIdAddContactInfoResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/melding/{melding_id}/add_contact_info',
        path: {
            melding_id: data.meldingId
        },
        query: {
            token: data.token
        },
        errors: {
            400: 'Transition not allowed from current state',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            default: 'Unexpected error'
        }
    });
};

/**
 * User:Create
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserOutput Successful Response
 * @throws ApiError
 */
export const postUser = (data: PostUserData): CancelablePromise<PostUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/user/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            409: 'Conflict, a uniqueness error occurred',
            422: 'Validation Error'
        }
    });
};

/**
 * User:List
 * @param data The data for the request.
 * @param data.limit
 * @param data.offset
 * @param data.sort
 * @returns UserOutput Successful Response
 * @throws ApiError
 */
export const getUser = (data: GetUserData = {}): CancelablePromise<GetUserResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/',
        query: {
            limit: data.limit,
            offset: data.offset,
            sort: data.sort
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            422: 'Validation Error'
        }
    });
};

/**
 * User:Retrieve
 * @param data The data for the request.
 * @param data.userId The id of the user.
 * @returns UserOutput Successful Response
 * @throws ApiError
 */
export const getUserByUserId = (data: GetUserByUserIdData): CancelablePromise<GetUserByUserIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/{user_id}',
        path: {
            user_id: data.userId
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * User:Delete
 * @param data The data for the request.
 * @param data.userId The id of the user.
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteUserByUserId = (data: DeleteUserByUserIdData): CancelablePromise<DeleteUserByUserIdResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/user/{user_id}',
        path: {
            user_id: data.userId
        },
        errors: {
            400: 'Delete own account',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * User:Update
 * @param data The data for the request.
 * @param data.userId The id of the user.
 * @param data.requestBody
 * @returns UserOutput Successful Response
 * @throws ApiError
 */
export const patchUserByUserId = (data: PatchUserByUserIdData): CancelablePromise<PatchUserByUserIdResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/user/{user_id}',
        path: {
            user_id: data.userId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            409: 'Conflict, a uniqueness error occurred',
            422: 'Validation Error'
        }
    });
};

/**
 * Form:List
 * @param data The data for the request.
 * @param data.limit
 * @param data.offset
 * @param data.sort
 * @returns SimpleFormOutput Successful Response
 * @throws ApiError
 */
export const getForm = (data: GetFormData = {}): CancelablePromise<GetFormResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/form/',
        query: {
            limit: data.limit,
            offset: data.offset,
            sort: data.sort
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            422: 'Validation Error'
        }
    });
};

/**
 * Form:Create
 * @param data The data for the request.
 * @param data.requestBody
 * @returns FormOutput Successful Response
 * @throws ApiError
 */
export const postForm = (data: PostFormData): CancelablePromise<PostFormResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/form/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Providing a classification id that does not exist',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            422: 'Validation Error'
        }
    });
};

/**
 * Form:Retrieve
 * @param data The data for the request.
 * @param data.formId The id of the form.
 * @returns FormOutput Successful Response
 * @throws ApiError
 */
export const getFormByFormId = (data: GetFormByFormIdData): CancelablePromise<GetFormByFormIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/form/{form_id}',
        path: {
            form_id: data.formId
        },
        errors: {
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Form:Update
 * @param data The data for the request.
 * @param data.formId The id of the form.
 * @param data.requestBody
 * @returns FormOutput Successful Response
 * @throws ApiError
 */
export const putFormByFormId = (data: PutFormByFormIdData): CancelablePromise<PutFormByFormIdResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/form/{form_id}',
        path: {
            form_id: data.formId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Providing a classification id that does not exist',
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Form:Delete
 * @param data The data for the request.
 * @param data.formId The id of the form.
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteFormByFormId = (data: DeleteFormByFormIdData): CancelablePromise<DeleteFormByFormIdResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/form/{form_id}',
        path: {
            form_id: data.formId
        },
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Form:Classification
 * @param data The data for the request.
 * @param data.classificationId The id of the classification that the form belongs to.
 * @returns FormOutput Successful Response
 * @throws ApiError
 */
export const getFormClassificationByClassificationId = (data: GetFormClassificationByClassificationIdData): CancelablePromise<GetFormClassificationByClassificationIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/form/classification/{classification_id}',
        path: {
            classification_id: data.classificationId
        },
        errors: {
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Static-Form:Retrieve
 * @param data The data for the request.
 * @param data.staticFormId The id of the static form.
 * @returns StaticFormOutput Successful Response
 * @throws ApiError
 */
export const getStaticFormByStaticFormId = (data: GetStaticFormByStaticFormIdData): CancelablePromise<GetStaticFormByStaticFormIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/static-form/{static_form_id}',
        path: {
            static_form_id: data.staticFormId
        },
        errors: {
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Static-Form:Update
 * @param data The data for the request.
 * @param data.staticFormId The id of the static form.
 * @param data.requestBody
 * @returns StaticFormOutput Successful Response
 * @throws ApiError
 */
export const putStaticFormByStaticFormId = (data: PutStaticFormByStaticFormIdData): CancelablePromise<PutStaticFormByStaticFormIdResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/static-form/{static_form_id}',
        path: {
            static_form_id: data.staticFormId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            401: 'Unauthorized, perhaps the token was invalid or expired, or the user could not be found.',
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};

/**
 * Static-Form:List
 * @param data The data for the request.
 * @param data.limit
 * @param data.offset
 * @param data.sort
 * @returns SimpleStaticFormOutput Successful Response
 * @throws ApiError
 */
export const getStaticForm = (data: GetStaticFormData = {}): CancelablePromise<GetStaticFormResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/static-form/',
        query: {
            limit: data.limit,
            offset: data.offset,
            sort: data.sort
        },
        errors: {
            404: 'Not Found',
            422: 'Validation Error'
        }
    });
};