// This file is auto-generated by @hey-api/openapi-ts

export const $AnswerInput = {
  properties: {
    text: {
      type: 'string',
      minLength: 1,
      title: 'Text',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'AnswerInput',
} as const

export const $AnswerOutput = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'AnswerOutput',
} as const

export const $ClassificationInput = {
  properties: {
    name: {
      type: 'string',
      minLength: 1,
      title: 'Name',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'ClassificationInput',
} as const

export const $ClassificationOutput = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    form: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Form',
    },
  },
  type: 'object',
  required: ['name', 'id'],
  title: 'ClassificationOutput',
} as const

export const $FormComponentInput = {
  properties: {
    label: {
      type: 'string',
      minLength: 3,
      title: 'Label',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    key: {
      type: 'string',
      minLength: 3,
      title: 'Key',
    },
    type: {
      allOf: [
        {
          $ref: '#/components/schemas/FormIoComponentTypeEnum',
        },
      ],
      default: 'textarea',
    },
    input: {
      type: 'boolean',
      title: 'Input',
    },
    autoExpand: {
      type: 'boolean',
      title: 'Autoexpand',
    },
    showCharCount: {
      type: 'boolean',
      title: 'Showcharcount',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['label', 'description', 'key', 'input', 'autoExpand', 'showCharCount'],
  title: 'FormComponentInput',
} as const

export const $FormComponentOutput = {
  properties: {
    label: {
      type: 'string',
      title: 'Label',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    key: {
      type: 'string',
      title: 'Key',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
    input: {
      type: 'boolean',
      title: 'Input',
    },
    autoExpand: {
      type: 'boolean',
      title: 'Autoexpand',
    },
    showCharCount: {
      type: 'boolean',
      title: 'Showcharcount',
    },
    position: {
      type: 'integer',
      title: 'Position',
    },
    question: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Question',
    },
  },
  type: 'object',
  required: ['label', 'description', 'key', 'type', 'input', 'autoExpand', 'showCharCount', 'position'],
  title: 'FormComponentOutput',
} as const

export const $FormInput = {
  properties: {
    title: {
      type: 'string',
      minLength: 3,
      title: 'Title',
    },
    components: {
      items: {
        oneOf: [
          {
            $ref: '#/components/schemas/FormPanelComponentInput',
          },
          {
            $ref: '#/components/schemas/FormComponentInput',
          },
        ],
      },
      type: 'array',
      title: 'Components',
    },
    display: {
      $ref: '#/components/schemas/FormIoFormDisplayEnum',
    },
    classification: {
      anyOf: [
        {
          type: 'integer',
          exclusiveMinimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Classification',
    },
  },
  type: 'object',
  required: ['title', 'components', 'display'],
  title: 'FormInput',
} as const

export const $FormIoComponentTypeEnum = {
  type: 'string',
  enum: ['panel', 'textarea'],
  title: 'FormIoComponentTypeEnum',
  description: 'The value of the type field',
} as const

export const $FormIoFormDisplayEnum = {
  type: 'string',
  enum: ['form', 'wizard', 'pdf'],
  title: 'FormIoFormDisplayEnum',
  description: `The value of the display field on the form can be one of the following:
- form
- wizard
- pdf`,
} as const

export const $FormOnlyOutput = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    display: {
      type: 'string',
      title: 'Display',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    classification: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Classification',
    },
  },
  type: 'object',
  required: ['title', 'display', 'id'],
  title: 'FormOnlyOutput',
} as const

export const $FormOutput = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    display: {
      type: 'string',
      title: 'Display',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    classification: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Classification',
    },
    components: {
      items: {
        anyOf: [
          {
            $ref: '#/components/schemas/FormComponentOutput',
          },
          {
            $ref: '#/components/schemas/FormPanelComponentOutput',
          },
        ],
      },
      type: 'array',
      title: 'Components',
    },
  },
  type: 'object',
  required: ['title', 'display', 'id', 'components'],
  title: 'FormOutput',
} as const

export const $FormPanelComponentInput = {
  properties: {
    label: {
      type: 'string',
      minLength: 3,
      title: 'Label',
    },
    key: {
      type: 'string',
      minLength: 3,
      title: 'Key',
    },
    type: {
      allOf: [
        {
          $ref: '#/components/schemas/FormIoComponentTypeEnum',
        },
      ],
      default: 'panel',
    },
    input: {
      type: 'boolean',
      title: 'Input',
      default: false,
    },
    components: {
      items: {
        $ref: '#/components/schemas/FormComponentInput',
      },
      type: 'array',
      title: 'Components',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['label', 'key', 'components'],
  title: 'FormPanelComponentInput',
} as const

export const $FormPanelComponentOutput = {
  properties: {
    label: {
      type: 'string',
      title: 'Label',
    },
    key: {
      type: 'string',
      title: 'Key',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
    input: {
      type: 'boolean',
      title: 'Input',
    },
    position: {
      type: 'integer',
      title: 'Position',
    },
    components: {
      items: {
        $ref: '#/components/schemas/FormComponentOutput',
      },
      type: 'array',
      title: 'Components',
    },
  },
  type: 'object',
  required: ['label', 'key', 'type', 'input', 'position', 'components'],
  title: 'FormPanelComponentOutput',
} as const

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const

export const $MeldingCreateOutput = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    text: {
      type: 'string',
      title: 'Text',
    },
    state: {
      type: 'string',
      title: 'State',
    },
    classification: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Classification',
    },
    token: {
      type: 'string',
      title: 'Token',
    },
  },
  type: 'object',
  required: ['id', 'text', 'state', 'token'],
  title: 'MeldingCreateOutput',
} as const

export const $MeldingInput = {
  properties: {
    text: {
      type: 'string',
      minLength: 1,
      title: 'Text',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'MeldingInput',
} as const

export const $MeldingOutput = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    text: {
      type: 'string',
      title: 'Text',
    },
    state: {
      type: 'string',
      title: 'State',
    },
    classification: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Classification',
    },
  },
  type: 'object',
  required: ['id', 'text', 'state'],
  title: 'MeldingOutput',
} as const

export const $PrimaryFormInput = {
  properties: {
    title: {
      type: 'string',
      minLength: 3,
      title: 'Title',
    },
    components: {
      items: {
        oneOf: [
          {
            $ref: '#/components/schemas/FormPanelComponentInput',
          },
          {
            $ref: '#/components/schemas/FormComponentInput',
          },
        ],
      },
      type: 'array',
      title: 'Components',
    },
  },
  type: 'object',
  required: ['title', 'components'],
  title: 'PrimaryFormInput',
} as const

export const $PrimaryFormOutput = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    display: {
      type: 'string',
      title: 'Display',
    },
    components: {
      items: {
        anyOf: [
          {
            $ref: '#/components/schemas/FormComponentOutput',
          },
          {
            $ref: '#/components/schemas/FormPanelComponentOutput',
          },
        ],
      },
      type: 'array',
      title: 'Components',
    },
  },
  type: 'object',
  required: ['title', 'display', 'components'],
  title: 'PrimaryFormOutput',
} as const

export const $UserCreateInput = {
  properties: {
    username: {
      type: 'string',
      minLength: 3,
      title: 'Username',
    },
    email: {
      type: 'string',
      format: 'email',
      title: 'Email',
    },
  },
  type: 'object',
  required: ['username', 'email'],
  title: 'UserCreateInput',
} as const

export const $UserOutput = {
  properties: {
    id: {
      type: 'integer',
      title: 'Id',
    },
    email: {
      type: 'string',
      title: 'Email',
    },
    username: {
      type: 'string',
      title: 'Username',
    },
  },
  type: 'object',
  required: ['id', 'email', 'username'],
  title: 'UserOutput',
} as const

export const $UserUpdateInput = {
  properties: {
    username: {
      anyOf: [
        {
          type: 'string',
          minLength: 3,
        },
        {
          type: 'null',
        },
      ],
      title: 'Username',
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
  },
  type: 'object',
  title: 'UserUpdateInput',
} as const

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const
