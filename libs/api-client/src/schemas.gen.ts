// This file is auto-generated by @hey-api/openapi-ts

export const $Add = {
    properties: {
        '+': {
            items: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'string'
                    },
                    {
                        '$ref': '#/components/schemas/Var'
                    }
                ]
            },
            type: 'array',
            title: '+'
        }
    },
    type: 'object',
    required: ['+'],
    title: 'Add'
} as const;

export const $All_Input = {
    properties: {
        all: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'All'
        }
    },
    type: 'object',
    required: ['all'],
    title: 'All'
} as const;

export const $All_Output = {
    properties: {
        all: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'All'
        }
    },
    type: 'object',
    required: ['all'],
    title: 'All'
} as const;

export const $And_Input = {
    properties: {
        and: {
            items: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'string'
                    },
                    {
                        items: {
                            type: 'null'
                        },
                        type: 'array'
                    },
                    {
                        '$ref': '#/components/schemas/Add'
                    },
                    {
                        '$ref': '#/components/schemas/All-Input'
                    },
                    {
                        '$ref': '#/components/schemas/And-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Cat'
                    },
                    {
                        '$ref': '#/components/schemas/Divide'
                    },
                    {
                        '$ref': '#/components/schemas/Equals'
                    },
                    {
                        '$ref': '#/components/schemas/Filter-Input'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThan'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/If'
                    },
                    {
                        '$ref': '#/components/schemas/In-Input'
                    },
                    {
                        '$ref': '#/components/schemas/LessThan'
                    },
                    {
                        '$ref': '#/components/schemas/LessThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/Log'
                    },
                    {
                        '$ref': '#/components/schemas/Map-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Max'
                    },
                    {
                        '$ref': '#/components/schemas/Merge'
                    },
                    {
                        '$ref': '#/components/schemas/Min'
                    },
                    {
                        '$ref': '#/components/schemas/Missing'
                    },
                    {
                        '$ref': '#/components/schemas/MissingSome'
                    },
                    {
                        '$ref': '#/components/schemas/Modulo'
                    },
                    {
                        '$ref': '#/components/schemas/Multiply'
                    },
                    {
                        '$ref': '#/components/schemas/None_-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Not'
                    },
                    {
                        '$ref': '#/components/schemas/NotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/NotNot'
                    },
                    {
                        '$ref': '#/components/schemas/Or-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Reduce-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Some-Input'
                    },
                    {
                        '$ref': '#/components/schemas/StrictEquals'
                    },
                    {
                        '$ref': '#/components/schemas/StrictNotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/Substr'
                    },
                    {
                        '$ref': '#/components/schemas/Subtract'
                    },
                    {
                        '$ref': '#/components/schemas/Var'
                    }
                ]
            },
            type: 'array',
            title: 'And'
        }
    },
    type: 'object',
    required: ['and'],
    title: 'And'
} as const;

export const $And_Output = {
    properties: {
        and: {
            items: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'string'
                    },
                    {
                        items: {
                            type: 'null'
                        },
                        type: 'array'
                    },
                    {
                        '$ref': '#/components/schemas/Add'
                    },
                    {
                        '$ref': '#/components/schemas/All-Output'
                    },
                    {
                        '$ref': '#/components/schemas/And-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Cat'
                    },
                    {
                        '$ref': '#/components/schemas/Divide'
                    },
                    {
                        '$ref': '#/components/schemas/Equals'
                    },
                    {
                        '$ref': '#/components/schemas/Filter-Output'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThan'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/If'
                    },
                    {
                        '$ref': '#/components/schemas/In-Output'
                    },
                    {
                        '$ref': '#/components/schemas/LessThan'
                    },
                    {
                        '$ref': '#/components/schemas/LessThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/Log'
                    },
                    {
                        '$ref': '#/components/schemas/Map-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Max'
                    },
                    {
                        '$ref': '#/components/schemas/Merge'
                    },
                    {
                        '$ref': '#/components/schemas/Min'
                    },
                    {
                        '$ref': '#/components/schemas/Missing'
                    },
                    {
                        '$ref': '#/components/schemas/MissingSome'
                    },
                    {
                        '$ref': '#/components/schemas/Modulo'
                    },
                    {
                        '$ref': '#/components/schemas/Multiply'
                    },
                    {
                        '$ref': '#/components/schemas/None_-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Not'
                    },
                    {
                        '$ref': '#/components/schemas/NotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/NotNot'
                    },
                    {
                        '$ref': '#/components/schemas/Or-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Reduce-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Some-Output'
                    },
                    {
                        '$ref': '#/components/schemas/StrictEquals'
                    },
                    {
                        '$ref': '#/components/schemas/StrictNotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/Substr'
                    },
                    {
                        '$ref': '#/components/schemas/Subtract'
                    },
                    {
                        '$ref': '#/components/schemas/Var'
                    }
                ]
            },
            type: 'array',
            title: 'And'
        }
    },
    type: 'object',
    required: ['and'],
    title: 'And'
} as const;

export const $AnswerInput = {
    properties: {
        text: {
            type: 'string',
            minLength: 1,
            title: 'Text'
        }
    },
    type: 'object',
    required: ['text'],
    title: 'AnswerInput'
} as const;

export const $AnswerOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'updated_at'],
    title: 'AnswerOutput'
} as const;

export const $AttachmentOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        original_filename: {
            type: 'string',
            title: 'Original Filename'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'updated_at', 'original_filename'],
    title: 'AttachmentOutput'
} as const;

export const $Body_melding_attachment_melding__melding_id__attachment_post = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_melding_attachment_melding__melding_id__attachment_post'
} as const;

export const $Cat = {
    properties: {
        cat: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'string'
                },
                {
                    items: {
                        anyOf: [
                            {
                                type: 'integer'
                            },
                            {
                                type: 'string'
                            }
                        ]
                    },
                    type: 'array'
                }
            ],
            title: 'Cat'
        }
    },
    type: 'object',
    required: ['cat'],
    title: 'Cat'
} as const;

export const $ClassificationInput = {
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ClassificationInput'
} as const;

export const $ClassificationOutput = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        form: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Form'
        }
    },
    type: 'object',
    required: ['name', 'id', 'created_at', 'updated_at'],
    title: 'ClassificationOutput'
} as const;

export const $Divide = {
    properties: {
        '/': {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '/'
        }
    },
    type: 'object',
    required: ['/'],
    title: 'Divide'
} as const;

export const $Equals = {
    properties: {
        '==': {
            prefixItems: [
                {},
                {}
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '=='
        }
    },
    type: 'object',
    required: ['=='],
    title: 'Equals'
} as const;

export const $Filter_Input = {
    properties: {
        filter: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Filter'
        }
    },
    type: 'object',
    required: ['filter'],
    title: 'Filter'
} as const;

export const $Filter_Output = {
    properties: {
        filter: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Filter'
        }
    },
    type: 'object',
    required: ['filter'],
    title: 'Filter'
} as const;

export const $FormCheckboxComponentInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 3,
            title: 'Label'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        key: {
            type: 'string',
            minLength: 3,
            title: 'Key'
        },
        type: {
            '$ref': '#/components/schemas/FormIoComponentTypeEnum',
            default: 'selectboxes'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentInputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueInput'
            },
            type: 'array',
            title: 'Values'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['label', 'description', 'key', 'input', 'values'],
    title: 'FormCheckboxComponentInput'
} as const;

export const $FormCheckboxComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueOutput'
            },
            type: 'array',
            title: 'Values'
        },
        question: {
            type: 'integer',
            title: 'Question'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'values', 'question'],
    title: 'FormCheckboxComponentOutput'
} as const;

export const $FormComponentInputValidate = {
    properties: {
        json: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Add'
                },
                {
                    '$ref': '#/components/schemas/All-Input'
                },
                {
                    '$ref': '#/components/schemas/And-Input'
                },
                {
                    '$ref': '#/components/schemas/Cat'
                },
                {
                    '$ref': '#/components/schemas/Divide'
                },
                {
                    '$ref': '#/components/schemas/Equals'
                },
                {
                    '$ref': '#/components/schemas/Filter-Input'
                },
                {
                    '$ref': '#/components/schemas/GreaterThan'
                },
                {
                    '$ref': '#/components/schemas/GreaterThanOrEqual'
                },
                {
                    '$ref': '#/components/schemas/If'
                },
                {
                    '$ref': '#/components/schemas/In-Input'
                },
                {
                    '$ref': '#/components/schemas/LessThan'
                },
                {
                    '$ref': '#/components/schemas/LessThanOrEqual'
                },
                {
                    '$ref': '#/components/schemas/Log'
                },
                {
                    '$ref': '#/components/schemas/Map-Input'
                },
                {
                    '$ref': '#/components/schemas/Max'
                },
                {
                    '$ref': '#/components/schemas/Merge'
                },
                {
                    '$ref': '#/components/schemas/Min'
                },
                {
                    '$ref': '#/components/schemas/Missing'
                },
                {
                    '$ref': '#/components/schemas/MissingSome'
                },
                {
                    '$ref': '#/components/schemas/Modulo'
                },
                {
                    '$ref': '#/components/schemas/Multiply'
                },
                {
                    '$ref': '#/components/schemas/None_-Input'
                },
                {
                    '$ref': '#/components/schemas/Not'
                },
                {
                    '$ref': '#/components/schemas/NotEquals'
                },
                {
                    '$ref': '#/components/schemas/NotNot'
                },
                {
                    '$ref': '#/components/schemas/Or-Input'
                },
                {
                    '$ref': '#/components/schemas/Reduce-Input'
                },
                {
                    '$ref': '#/components/schemas/Some-Input'
                },
                {
                    '$ref': '#/components/schemas/StrictEquals'
                },
                {
                    '$ref': '#/components/schemas/StrictNotEquals'
                },
                {
                    '$ref': '#/components/schemas/Substr'
                },
                {
                    '$ref': '#/components/schemas/Subtract'
                },
                {
                    '$ref': '#/components/schemas/Var'
                }
            ],
            title: 'Json'
        }
    },
    type: 'object',
    required: ['json'],
    title: 'FormComponentInputValidate'
} as const;

export const $FormComponentOutputValidate = {
    properties: {
        json: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Add'
                },
                {
                    '$ref': '#/components/schemas/All-Output'
                },
                {
                    '$ref': '#/components/schemas/And-Output'
                },
                {
                    '$ref': '#/components/schemas/Cat'
                },
                {
                    '$ref': '#/components/schemas/Divide'
                },
                {
                    '$ref': '#/components/schemas/Equals'
                },
                {
                    '$ref': '#/components/schemas/Filter-Output'
                },
                {
                    '$ref': '#/components/schemas/GreaterThan'
                },
                {
                    '$ref': '#/components/schemas/GreaterThanOrEqual'
                },
                {
                    '$ref': '#/components/schemas/If'
                },
                {
                    '$ref': '#/components/schemas/In-Output'
                },
                {
                    '$ref': '#/components/schemas/LessThan'
                },
                {
                    '$ref': '#/components/schemas/LessThanOrEqual'
                },
                {
                    '$ref': '#/components/schemas/Log'
                },
                {
                    '$ref': '#/components/schemas/Map-Output'
                },
                {
                    '$ref': '#/components/schemas/Max'
                },
                {
                    '$ref': '#/components/schemas/Merge'
                },
                {
                    '$ref': '#/components/schemas/Min'
                },
                {
                    '$ref': '#/components/schemas/Missing'
                },
                {
                    '$ref': '#/components/schemas/MissingSome'
                },
                {
                    '$ref': '#/components/schemas/Modulo'
                },
                {
                    '$ref': '#/components/schemas/Multiply'
                },
                {
                    '$ref': '#/components/schemas/None_-Output'
                },
                {
                    '$ref': '#/components/schemas/Not'
                },
                {
                    '$ref': '#/components/schemas/NotEquals'
                },
                {
                    '$ref': '#/components/schemas/NotNot'
                },
                {
                    '$ref': '#/components/schemas/Or-Output'
                },
                {
                    '$ref': '#/components/schemas/Reduce-Output'
                },
                {
                    '$ref': '#/components/schemas/Some-Output'
                },
                {
                    '$ref': '#/components/schemas/StrictEquals'
                },
                {
                    '$ref': '#/components/schemas/StrictNotEquals'
                },
                {
                    '$ref': '#/components/schemas/Substr'
                },
                {
                    '$ref': '#/components/schemas/Subtract'
                },
                {
                    '$ref': '#/components/schemas/Var'
                }
            ],
            title: 'Json'
        }
    },
    type: 'object',
    required: ['json'],
    title: 'FormComponentOutputValidate'
} as const;

export const $FormComponentValueInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 1,
            title: 'Label'
        },
        value: {
            type: 'string',
            minLength: 1,
            title: 'Value'
        }
    },
    type: 'object',
    required: ['label', 'value'],
    title: 'FormComponentValueInput'
} as const;

export const $FormComponentValueOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        value: {
            type: 'string',
            title: 'Value'
        },
        position: {
            type: 'integer',
            title: 'Position'
        }
    },
    type: 'object',
    required: ['label', 'value', 'position'],
    title: 'FormComponentValueOutput'
} as const;

export const $FormInput = {
    properties: {
        title: {
            type: 'string',
            minLength: 3,
            title: 'Title'
        },
        display: {
            '$ref': '#/components/schemas/FormIoFormDisplayEnum'
        },
        components: {
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FormPanelComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextAreaComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextFieldComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormRadioComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormCheckboxComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormSelectComponentInput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        },
        classification: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Classification'
        }
    },
    type: 'object',
    required: ['title', 'display', 'components'],
    title: 'FormInput'
} as const;

export const $FormIoComponentTypeEnum = {
    type: 'string',
    enum: ['panel', 'textarea', 'textfield', 'selectboxes', 'radio', 'select'],
    title: 'FormIoComponentTypeEnum',
    description: 'The value of the type field'
} as const;

export const $FormIoFormDisplayEnum = {
    type: 'string',
    enum: ['form', 'wizard', 'pdf'],
    title: 'FormIoFormDisplayEnum',
    description: `The value of the display field on the form can be one of the following:
- form
- wizard
- pdf`
} as const;

export const $FormOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        display: {
            type: 'string',
            title: 'Display'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        classification: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Classification'
        },
        components: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/FormPanelComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextAreaComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextFieldInputComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormCheckboxComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormRadioComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormSelectComponentOutput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        }
    },
    type: 'object',
    required: ['id', 'title', 'display', 'created_at', 'updated_at', 'components'],
    title: 'FormOutput'
} as const;

export const $FormPanelComponentInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 3,
            title: 'Label'
        },
        key: {
            type: 'string',
            minLength: 3,
            title: 'Key'
        },
        type: {
            '$ref': '#/components/schemas/FormIoComponentTypeEnum',
            default: 'panel'
        },
        input: {
            type: 'boolean',
            title: 'Input',
            default: false
        },
        components: {
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FormTextAreaComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextFieldComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormRadioComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormCheckboxComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormSelectComponentInput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['label', 'key', 'components'],
    title: 'FormPanelComponentInput'
} as const;

export const $FormPanelComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        components: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/FormTextAreaComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextFieldInputComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormCheckboxComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormRadioComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/FormSelectComponentOutput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        }
    },
    type: 'object',
    required: ['label', 'key', 'type', 'input', 'position', 'components'],
    title: 'FormPanelComponentOutput'
} as const;

export const $FormRadioComponentInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 3,
            title: 'Label'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        key: {
            type: 'string',
            minLength: 3,
            title: 'Key'
        },
        type: {
            '$ref': '#/components/schemas/FormIoComponentTypeEnum',
            default: 'radio'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentInputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueInput'
            },
            type: 'array',
            title: 'Values'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['label', 'description', 'key', 'input', 'values'],
    title: 'FormRadioComponentInput'
} as const;

export const $FormRadioComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueOutput'
            },
            type: 'array',
            title: 'Values'
        },
        question: {
            type: 'integer',
            title: 'Question'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'values', 'question'],
    title: 'FormRadioComponentOutput'
} as const;

export const $FormSelectComponentDataInput = {
    properties: {
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueInput'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['values'],
    title: 'FormSelectComponentDataInput'
} as const;

export const $FormSelectComponentDataOutput = {
    properties: {
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueOutput'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['values'],
    title: 'FormSelectComponentDataOutput'
} as const;

export const $FormSelectComponentInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 3,
            title: 'Label'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        key: {
            type: 'string',
            minLength: 3,
            title: 'Key'
        },
        type: {
            '$ref': '#/components/schemas/FormIoComponentTypeEnum',
            default: 'select'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentInputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        widget: {
            type: 'string',
            title: 'Widget'
        },
        placeholder: {
            type: 'string',
            title: 'Placeholder'
        },
        data: {
            '$ref': '#/components/schemas/FormSelectComponentDataInput'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['label', 'description', 'key', 'input', 'widget', 'placeholder', 'data'],
    title: 'FormSelectComponentInput'
} as const;

export const $FormSelectComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        widget: {
            type: 'string',
            title: 'Widget'
        },
        placeholder: {
            type: 'string',
            title: 'Placeholder'
        },
        data: {
            '$ref': '#/components/schemas/FormSelectComponentDataOutput'
        },
        question: {
            type: 'integer',
            title: 'Question'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'widget', 'placeholder', 'data', 'question'],
    title: 'FormSelectComponentOutput'
} as const;

export const $FormTextAreaComponentInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 3,
            title: 'Label'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        key: {
            type: 'string',
            minLength: 3,
            title: 'Key'
        },
        type: {
            '$ref': '#/components/schemas/FormIoComponentTypeEnum',
            default: 'textarea'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentInputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        autoExpand: {
            type: 'boolean',
            title: 'Autoexpand'
        },
        maxCharCount: {
            type: 'integer',
            title: 'Maxcharcount'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['label', 'description', 'key', 'input', 'autoExpand', 'maxCharCount'],
    title: 'FormTextAreaComponentInput'
} as const;

export const $FormTextAreaComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        autoExpand: {
            type: 'boolean',
            title: 'Autoexpand'
        },
        maxCharCount: {
            type: 'integer',
            title: 'Maxcharcount'
        },
        question: {
            type: 'integer',
            title: 'Question'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'autoExpand', 'maxCharCount', 'question'],
    title: 'FormTextAreaComponentOutput'
} as const;

export const $FormTextFieldComponentInput = {
    properties: {
        label: {
            type: 'string',
            minLength: 3,
            title: 'Label'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        key: {
            type: 'string',
            minLength: 3,
            title: 'Key'
        },
        type: {
            '$ref': '#/components/schemas/FormIoComponentTypeEnum',
            default: 'textfield'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentInputValidate'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['label', 'description', 'key', 'input'],
    title: 'FormTextFieldComponentInput'
} as const;

export const $FormTextFieldInputComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        question: {
            type: 'integer',
            title: 'Question'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'question'],
    title: 'FormTextFieldInputComponentOutput'
} as const;

export const $GreaterThan = {
    properties: {
        '>': {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '>'
        }
    },
    type: 'object',
    required: ['>'],
    title: 'GreaterThan'
} as const;

export const $GreaterThanOrEqual = {
    properties: {
        '>=': {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '>='
        }
    },
    type: 'object',
    required: ['>='],
    title: 'GreaterThanOrEqual'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $If = {
    properties: {
        if: {
            items: {},
            type: 'array',
            title: 'If'
        }
    },
    type: 'object',
    required: ['if'],
    title: 'If'
} as const;

export const $In_Input = {
    properties: {
        in: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            items: {
                                anyOf: [
                                    {
                                        type: 'integer'
                                    },
                                    {
                                        type: 'string'
                                    }
                                ]
                            },
                            type: 'array'
                        },
                        {
                            type: 'string'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'In'
        }
    },
    type: 'object',
    required: ['in'],
    title: 'In'
} as const;

export const $In_Output = {
    properties: {
        in: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            items: {
                                anyOf: [
                                    {
                                        type: 'integer'
                                    },
                                    {
                                        type: 'string'
                                    }
                                ]
                            },
                            type: 'array'
                        },
                        {
                            type: 'string'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'In'
        }
    },
    type: 'object',
    required: ['in'],
    title: 'In'
} as const;

export const $LessThan = {
    properties: {
        '<': {
            anyOf: [
                {
                    prefixItems: [
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                },
                                {
                                    '$ref': '#/components/schemas/Var'
                                }
                            ]
                        },
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                {
                    prefixItems: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'integer'
                        },
                        {
                            type: 'integer'
                        }
                    ],
                    type: 'array',
                    maxItems: 3,
                    minItems: 3
                }
            ],
            title: '<'
        }
    },
    type: 'object',
    required: ['<'],
    title: 'LessThan'
} as const;

export const $LessThanOrEqual = {
    properties: {
        '<=': {
            anyOf: [
                {
                    prefixItems: [
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        },
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                {
                    prefixItems: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'integer'
                        },
                        {
                            type: 'integer'
                        }
                    ],
                    type: 'array',
                    maxItems: 3,
                    minItems: 3
                }
            ],
            title: '<='
        }
    },
    type: 'object',
    required: ['<='],
    title: 'LessThanOrEqual'
} as const;

export const $Log = {
    properties: {
        log: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'string'
                },
                {
                    type: 'boolean'
                },
                {
                    prefixItems: [
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                },
                                {
                                    type: 'boolean'
                                }
                            ]
                        }
                    ],
                    type: 'array',
                    maxItems: 1,
                    minItems: 1
                }
            ],
            title: 'Log'
        }
    },
    type: 'object',
    required: ['log'],
    title: 'Log'
} as const;

export const $Map_Input = {
    properties: {
        map: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Map'
        }
    },
    type: 'object',
    required: ['map'],
    title: 'Map'
} as const;

export const $Map_Output = {
    properties: {
        map: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Map'
        }
    },
    type: 'object',
    required: ['map'],
    title: 'Map'
} as const;

export const $Max = {
    properties: {
        max: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Max'
        }
    },
    type: 'object',
    required: ['max'],
    title: 'Max'
} as const;

export const $MeldingCreateOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        text: {
            type: 'string',
            title: 'Text'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        classification: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Classification'
        },
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'updated_at', 'text', 'state', 'token'],
    title: 'MeldingCreateOutput'
} as const;

export const $MeldingInput = {
    properties: {
        text: {
            type: 'string',
            minLength: 1,
            title: 'Text'
        }
    },
    type: 'object',
    required: ['text'],
    title: 'MeldingInput'
} as const;

export const $MeldingOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        text: {
            type: 'string',
            title: 'Text'
        },
        state: {
            type: 'string',
            title: 'State'
        },
        classification: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Classification'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'updated_at', 'text', 'state'],
    title: 'MeldingOutput'
} as const;

export const $Merge = {
    properties: {
        merge: {
            title: 'Merge'
        }
    },
    type: 'object',
    required: ['merge'],
    title: 'Merge'
} as const;

export const $Min = {
    properties: {
        min: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Min'
        }
    },
    type: 'object',
    required: ['min'],
    title: 'Min'
} as const;

export const $Missing = {
    properties: {
        missing: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'string'
                },
                {
                    '$ref': '#/components/schemas/Merge'
                }
            ],
            title: 'Missing'
        }
    },
    type: 'object',
    required: ['missing'],
    title: 'Missing'
} as const;

export const $MissingSome = {
    properties: {
        missing_some: {
            prefixItems: [
                {
                    type: 'integer'
                },
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Missing Some'
        }
    },
    type: 'object',
    required: ['missing_some'],
    title: 'MissingSome'
} as const;

export const $Modulo = {
    properties: {
        '%': {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {
                    type: 'integer'
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '%'
        }
    },
    type: 'object',
    required: ['%'],
    title: 'Modulo'
} as const;

export const $Multiply = {
    properties: {
        '*': {
            items: {
                anyOf: [
                    {
                        type: 'integer'
                    },
                    {
                        type: 'string'
                    },
                    {
                        '$ref': '#/components/schemas/Var'
                    }
                ]
            },
            type: 'array',
            title: '*'
        }
    },
    type: 'object',
    required: ['*'],
    title: 'Multiply'
} as const;

export const $None__Input = {
    properties: {
        none: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'None'
        }
    },
    type: 'object',
    required: ['none'],
    title: 'None_'
} as const;

export const $None__Output = {
    properties: {
        none: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'None'
        }
    },
    type: 'object',
    required: ['none'],
    title: 'None_'
} as const;

export const $Not = {
    properties: {
        '!': {
            anyOf: [
                {
                    prefixItems: [
                        {
                            anyOf: [
                                {
                                    type: 'boolean'
                                },
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        }
                    ],
                    type: 'array',
                    maxItems: 1,
                    minItems: 1
                },
                {
                    type: 'boolean'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'string'
                },
                {
                    prefixItems: [
                        {
                            items: {
                                type: 'null'
                            },
                            type: 'array'
                        }
                    ],
                    type: 'array',
                    maxItems: 1,
                    minItems: 1
                }
            ],
            title: '!'
        }
    },
    type: 'object',
    required: ['!'],
    title: 'Not'
} as const;

export const $NotEquals = {
    properties: {
        '!=': {
            prefixItems: [
                {},
                {}
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '!='
        }
    },
    type: 'object',
    required: ['!='],
    title: 'NotEquals'
} as const;

export const $NotNot = {
    properties: {
        '!!': {
            prefixItems: [
                {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        },
                        {
                            items: {
                                type: 'null'
                            },
                            type: 'array'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 1,
            minItems: 1,
            title: '!!'
        }
    },
    type: 'object',
    required: ['!!'],
    title: 'NotNot'
} as const;

export const $Or_Input = {
    properties: {
        or: {
            items: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'string'
                    },
                    {
                        items: {
                            type: 'null'
                        },
                        type: 'array'
                    },
                    {
                        '$ref': '#/components/schemas/Add'
                    },
                    {
                        '$ref': '#/components/schemas/All-Input'
                    },
                    {
                        '$ref': '#/components/schemas/And-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Cat'
                    },
                    {
                        '$ref': '#/components/schemas/Divide'
                    },
                    {
                        '$ref': '#/components/schemas/Equals'
                    },
                    {
                        '$ref': '#/components/schemas/Filter-Input'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThan'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/If'
                    },
                    {
                        '$ref': '#/components/schemas/In-Input'
                    },
                    {
                        '$ref': '#/components/schemas/LessThan'
                    },
                    {
                        '$ref': '#/components/schemas/LessThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/Log'
                    },
                    {
                        '$ref': '#/components/schemas/Map-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Max'
                    },
                    {
                        '$ref': '#/components/schemas/Merge'
                    },
                    {
                        '$ref': '#/components/schemas/Min'
                    },
                    {
                        '$ref': '#/components/schemas/Missing'
                    },
                    {
                        '$ref': '#/components/schemas/MissingSome'
                    },
                    {
                        '$ref': '#/components/schemas/Modulo'
                    },
                    {
                        '$ref': '#/components/schemas/Multiply'
                    },
                    {
                        '$ref': '#/components/schemas/None_-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Not'
                    },
                    {
                        '$ref': '#/components/schemas/NotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/NotNot'
                    },
                    {
                        '$ref': '#/components/schemas/Or-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Reduce-Input'
                    },
                    {
                        '$ref': '#/components/schemas/Some-Input'
                    },
                    {
                        '$ref': '#/components/schemas/StrictEquals'
                    },
                    {
                        '$ref': '#/components/schemas/StrictNotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/Substr'
                    },
                    {
                        '$ref': '#/components/schemas/Subtract'
                    },
                    {
                        '$ref': '#/components/schemas/Var'
                    }
                ]
            },
            type: 'array',
            title: 'Or'
        }
    },
    type: 'object',
    required: ['or'],
    title: 'Or'
} as const;

export const $Or_Output = {
    properties: {
        or: {
            items: {
                anyOf: [
                    {
                        type: 'boolean'
                    },
                    {
                        type: 'integer'
                    },
                    {
                        type: 'string'
                    },
                    {
                        items: {
                            type: 'null'
                        },
                        type: 'array'
                    },
                    {
                        '$ref': '#/components/schemas/Add'
                    },
                    {
                        '$ref': '#/components/schemas/All-Output'
                    },
                    {
                        '$ref': '#/components/schemas/And-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Cat'
                    },
                    {
                        '$ref': '#/components/schemas/Divide'
                    },
                    {
                        '$ref': '#/components/schemas/Equals'
                    },
                    {
                        '$ref': '#/components/schemas/Filter-Output'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThan'
                    },
                    {
                        '$ref': '#/components/schemas/GreaterThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/If'
                    },
                    {
                        '$ref': '#/components/schemas/In-Output'
                    },
                    {
                        '$ref': '#/components/schemas/LessThan'
                    },
                    {
                        '$ref': '#/components/schemas/LessThanOrEqual'
                    },
                    {
                        '$ref': '#/components/schemas/Log'
                    },
                    {
                        '$ref': '#/components/schemas/Map-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Max'
                    },
                    {
                        '$ref': '#/components/schemas/Merge'
                    },
                    {
                        '$ref': '#/components/schemas/Min'
                    },
                    {
                        '$ref': '#/components/schemas/Missing'
                    },
                    {
                        '$ref': '#/components/schemas/MissingSome'
                    },
                    {
                        '$ref': '#/components/schemas/Modulo'
                    },
                    {
                        '$ref': '#/components/schemas/Multiply'
                    },
                    {
                        '$ref': '#/components/schemas/None_-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Not'
                    },
                    {
                        '$ref': '#/components/schemas/NotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/NotNot'
                    },
                    {
                        '$ref': '#/components/schemas/Or-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Reduce-Output'
                    },
                    {
                        '$ref': '#/components/schemas/Some-Output'
                    },
                    {
                        '$ref': '#/components/schemas/StrictEquals'
                    },
                    {
                        '$ref': '#/components/schemas/StrictNotEquals'
                    },
                    {
                        '$ref': '#/components/schemas/Substr'
                    },
                    {
                        '$ref': '#/components/schemas/Subtract'
                    },
                    {
                        '$ref': '#/components/schemas/Var'
                    }
                ]
            },
            type: 'array',
            title: 'Or'
        }
    },
    type: 'object',
    required: ['or'],
    title: 'Or'
} as const;

export const $Reduce_Input = {
    properties: {
        reduce: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {}
            ],
            type: 'array',
            maxItems: 3,
            minItems: 3,
            title: 'Reduce'
        }
    },
    type: 'object',
    required: ['reduce'],
    title: 'Reduce'
} as const;

export const $Reduce_Output = {
    properties: {
        reduce: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                },
                {}
            ],
            type: 'array',
            maxItems: 3,
            minItems: 3,
            title: 'Reduce'
        }
    },
    type: 'object',
    required: ['reduce'],
    title: 'Reduce'
} as const;

export const $SimpleFormOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        display: {
            type: 'string',
            title: 'Display'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        classification: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Classification'
        }
    },
    type: 'object',
    required: ['id', 'title', 'display', 'created_at', 'updated_at'],
    title: 'SimpleFormOutput'
} as const;

export const $Some_Input = {
    properties: {
        some: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Input'
                        },
                        {
                            '$ref': '#/components/schemas/And-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Input'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Input'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Input'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Input'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Some'
        }
    },
    type: 'object',
    required: ['some'],
    title: 'Some'
} as const;

export const $Some_Output = {
    properties: {
        some: {
            prefixItems: [
                {
                    anyOf: [
                        {
                            items: {},
                            type: 'array'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        }
                    ]
                },
                {
                    anyOf: [
                        {
                            type: 'boolean'
                        },
                        {
                            '$ref': '#/components/schemas/Add'
                        },
                        {
                            '$ref': '#/components/schemas/All-Output'
                        },
                        {
                            '$ref': '#/components/schemas/And-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Cat'
                        },
                        {
                            '$ref': '#/components/schemas/Divide'
                        },
                        {
                            '$ref': '#/components/schemas/Equals'
                        },
                        {
                            '$ref': '#/components/schemas/Filter-Output'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThan'
                        },
                        {
                            '$ref': '#/components/schemas/GreaterThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/If'
                        },
                        {
                            '$ref': '#/components/schemas/In-Output'
                        },
                        {
                            '$ref': '#/components/schemas/LessThan'
                        },
                        {
                            '$ref': '#/components/schemas/LessThanOrEqual'
                        },
                        {
                            '$ref': '#/components/schemas/Log'
                        },
                        {
                            '$ref': '#/components/schemas/Map-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Max'
                        },
                        {
                            '$ref': '#/components/schemas/Merge'
                        },
                        {
                            '$ref': '#/components/schemas/Min'
                        },
                        {
                            '$ref': '#/components/schemas/Missing'
                        },
                        {
                            '$ref': '#/components/schemas/MissingSome'
                        },
                        {
                            '$ref': '#/components/schemas/Modulo'
                        },
                        {
                            '$ref': '#/components/schemas/Multiply'
                        },
                        {
                            '$ref': '#/components/schemas/None_-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Not'
                        },
                        {
                            '$ref': '#/components/schemas/NotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/NotNot'
                        },
                        {
                            '$ref': '#/components/schemas/Or-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Reduce-Output'
                        },
                        {
                            '$ref': '#/components/schemas/Some-Output'
                        },
                        {
                            '$ref': '#/components/schemas/StrictEquals'
                        },
                        {
                            '$ref': '#/components/schemas/StrictNotEquals'
                        },
                        {
                            '$ref': '#/components/schemas/Substr'
                        },
                        {
                            '$ref': '#/components/schemas/Subtract'
                        },
                        {
                            '$ref': '#/components/schemas/Var'
                        }
                    ]
                }
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: 'Some'
        }
    },
    type: 'object',
    required: ['some'],
    title: 'Some'
} as const;

export const $StaticFormCheckboxComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueOutput'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'values'],
    title: 'StaticFormCheckboxComponentOutput'
} as const;

export const $StaticFormInput = {
    properties: {
        title: {
            type: 'string',
            minLength: 3,
            title: 'Title'
        },
        display: {
            '$ref': '#/components/schemas/FormIoFormDisplayEnum'
        },
        components: {
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FormPanelComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextAreaComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormTextFieldComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormRadioComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormCheckboxComponentInput'
                    },
                    {
                        '$ref': '#/components/schemas/FormSelectComponentInput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        }
    },
    type: 'object',
    required: ['title', 'display', 'components'],
    title: 'StaticFormInput'
} as const;

export const $StaticFormOutput = {
    properties: {
        type: {
            type: 'string',
            title: 'Type'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        display: {
            type: 'string',
            title: 'Display'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        components: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/StaticFormPanelComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormTextAreaComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormTextFieldInputComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormCheckboxComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormRadioComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormSelectComponentOutput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        }
    },
    type: 'object',
    required: ['type', 'title', 'display', 'created_at', 'updated_at', 'components'],
    title: 'StaticFormOutput'
} as const;

export const $StaticFormPanelComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        components: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/StaticFormTextAreaComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormTextFieldInputComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormCheckboxComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormRadioComponentOutput'
                    },
                    {
                        '$ref': '#/components/schemas/StaticFormSelectComponentOutput'
                    }
                ]
            },
            type: 'array',
            title: 'Components'
        }
    },
    type: 'object',
    required: ['label', 'key', 'type', 'input', 'position', 'components'],
    title: 'StaticFormPanelComponentOutput'
} as const;

export const $StaticFormRadioComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        values: {
            items: {
                '$ref': '#/components/schemas/FormComponentValueOutput'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'values'],
    title: 'StaticFormRadioComponentOutput'
} as const;

export const $StaticFormSelectComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        widget: {
            type: 'string',
            title: 'Widget'
        },
        placeholder: {
            type: 'string',
            title: 'Placeholder'
        },
        data: {
            '$ref': '#/components/schemas/FormSelectComponentDataOutput'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'widget', 'placeholder', 'data'],
    title: 'StaticFormSelectComponentOutput'
} as const;

export const $StaticFormTextAreaComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        },
        autoExpand: {
            type: 'boolean',
            title: 'Autoexpand'
        },
        maxCharCount: {
            type: 'integer',
            title: 'Maxcharcount'
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position', 'autoExpand', 'maxCharCount'],
    title: 'StaticFormTextAreaComponentOutput'
} as const;

export const $StaticFormTextFieldInputComponentOutput = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        input: {
            type: 'boolean',
            title: 'Input'
        },
        position: {
            type: 'integer',
            title: 'Position'
        },
        validate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FormComponentOutputValidate'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['label', 'description', 'key', 'type', 'input', 'position'],
    title: 'StaticFormTextFieldInputComponentOutput'
} as const;

export const $StaticFormTypeEnum = {
    type: 'string',
    enum: ['primary'],
    const: 'primary',
    title: 'StaticFormTypeEnum'
} as const;

export const $StrictEquals = {
    properties: {
        '===': {
            prefixItems: [
                {},
                {}
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '==='
        }
    },
    type: 'object',
    required: ['==='],
    title: 'StrictEquals'
} as const;

export const $StrictNotEquals = {
    properties: {
        '!==': {
            prefixItems: [
                {},
                {}
            ],
            type: 'array',
            maxItems: 2,
            minItems: 2,
            title: '!=='
        }
    },
    type: 'object',
    required: ['!=='],
    title: 'StrictNotEquals'
} as const;

export const $Substr = {
    properties: {
        substr: {
            anyOf: [
                {
                    prefixItems: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'integer'
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                {
                    prefixItems: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'integer'
                        },
                        {
                            type: 'integer'
                        }
                    ],
                    type: 'array',
                    maxItems: 3,
                    minItems: 3
                }
            ],
            title: 'Substr'
        }
    },
    type: 'object',
    required: ['substr'],
    title: 'Substr'
} as const;

export const $Subtract = {
    properties: {
        '-': {
            anyOf: [
                {
                    prefixItems: [
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        }
                    ],
                    type: 'array',
                    maxItems: 1,
                    minItems: 1
                },
                {
                    prefixItems: [
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        },
                        {
                            anyOf: [
                                {
                                    type: 'integer'
                                },
                                {
                                    type: 'string'
                                }
                            ]
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                }
            ],
            title: '-'
        }
    },
    type: 'object',
    required: ['-'],
    title: 'Subtract'
} as const;

export const $UserCreateInput = {
    properties: {
        username: {
            type: 'string',
            minLength: 3,
            title: 'Username'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['username', 'email'],
    title: 'UserCreateInput'
} as const;

export const $UserOutput = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        username: {
            type: 'string',
            title: 'Username'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'updated_at', 'email', 'username'],
    title: 'UserOutput'
} as const;

export const $UserUpdateInput = {
    properties: {
        username: {
            anyOf: [
                {
                    type: 'string',
                    minLength: 3
                },
                {
                    type: 'null'
                }
            ],
            title: 'Username'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateInput'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $Var = {
    properties: {
        var: {
            anyOf: [
                {
                    prefixItems: [
                        {
                            type: 'string'
                        }
                    ],
                    type: 'array',
                    maxItems: 1,
                    minItems: 1
                },
                {
                    type: 'string'
                },
                {
                    prefixItems: [
                        {
                            type: 'string'
                        },
                        {}
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                {
                    type: 'integer'
                },
                {
                    items: {
                        type: 'null'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Var'
        }
    },
    type: 'object',
    required: ['var'],
    title: 'Var'
} as const;