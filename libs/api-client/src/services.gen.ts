// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { PostClassificationData, PostClassificationError, PostClassificationResponse, GetClassificationData, GetClassificationError, GetClassificationResponse, GetClassificationByClassificationIdData, GetClassificationByClassificationIdError, GetClassificationByClassificationIdResponse, PatchClassificationByClassificationIdData, PatchClassificationByClassificationIdError, PatchClassificationByClassificationIdResponse, DeleteClassificationByClassificationIdData, DeleteClassificationByClassificationIdError, DeleteClassificationByClassificationIdResponse, PostMeldingData, PostMeldingError, PostMeldingResponse, GetMeldingData, GetMeldingError, GetMeldingResponse, GetMeldingByMeldingIdData, GetMeldingByMeldingIdError, GetMeldingByMeldingIdResponse, PatchMeldingByMeldingIdData, PatchMeldingByMeldingIdError, PatchMeldingByMeldingIdResponse, PutMeldingByMeldingIdAnswerQuestionsData, PutMeldingByMeldingIdAnswerQuestionsError, PutMeldingByMeldingIdAnswerQuestionsResponse, PutMeldingByMeldingIdProcessData, PutMeldingByMeldingIdProcessError, PutMeldingByMeldingIdProcessResponse, PutMeldingByMeldingIdCompleteData, PutMeldingByMeldingIdCompleteError, PutMeldingByMeldingIdCompleteResponse, PostMeldingByMeldingIdQuestionByQuestionIdData, PostMeldingByMeldingIdQuestionByQuestionIdError, PostMeldingByMeldingIdQuestionByQuestionIdResponse, PostMeldingByMeldingIdAttachmentData, PostMeldingByMeldingIdAttachmentError, PostMeldingByMeldingIdAttachmentResponse, PostUserData, PostUserError, PostUserResponse, GetUserData, GetUserError, GetUserResponse, GetUserByUserIdData, GetUserByUserIdError, GetUserByUserIdResponse, DeleteUserByUserIdData, DeleteUserByUserIdError, DeleteUserByUserIdResponse, PatchUserByUserIdData, PatchUserByUserIdError, PatchUserByUserIdResponse, GetFormData, GetFormError, GetFormResponse, PostFormData, PostFormError, PostFormResponse, GetFormByFormIdData, GetFormByFormIdError, GetFormByFormIdResponse, PutFormByFormIdData, PutFormByFormIdError, PutFormByFormIdResponse, DeleteFormByFormIdData, DeleteFormByFormIdError, DeleteFormByFormIdResponse, GetFormClassificationByClassificationIdData, GetFormClassificationByClassificationIdError, GetFormClassificationByClassificationIdResponse, GetStaticFormByFormTypeData, GetStaticFormByFormTypeError, GetStaticFormByFormTypeResponse, PutStaticFormByFormTypeData, PutStaticFormByFormTypeError, PutStaticFormByFormTypeResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Classification:Create
 */
export const postClassification = <ThrowOnError extends boolean = false>(options: Options<PostClassificationData, ThrowOnError>) => { return (options?.client ?? client).post<PostClassificationResponse, PostClassificationError, ThrowOnError>({
    ...options,
    url: '/classification/'
}); };

/**
 * Classification:List
 */
export const getClassification = <ThrowOnError extends boolean = false>(options?: Options<GetClassificationData, ThrowOnError>) => { return (options?.client ?? client).get<GetClassificationResponse, GetClassificationError, ThrowOnError>({
    ...options,
    url: '/classification/'
}); };

/**
 * Classification:Retrieve
 */
export const getClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<GetClassificationByClassificationIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetClassificationByClassificationIdResponse, GetClassificationByClassificationIdError, ThrowOnError>({
    ...options,
    url: '/classification/{classification_id}'
}); };

/**
 * Classification:Update
 */
export const patchClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<PatchClassificationByClassificationIdData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchClassificationByClassificationIdResponse, PatchClassificationByClassificationIdError, ThrowOnError>({
    ...options,
    url: '/classification/{classification_id}'
}); };

/**
 * Classification:Delete
 */
export const deleteClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<DeleteClassificationByClassificationIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteClassificationByClassificationIdResponse, DeleteClassificationByClassificationIdError, ThrowOnError>({
    ...options,
    url: '/classification/{classification_id}'
}); };

/**
 * Melding:Create
 */
export const postMelding = <ThrowOnError extends boolean = false>(options: Options<PostMeldingData, ThrowOnError>) => { return (options?.client ?? client).post<PostMeldingResponse, PostMeldingError, ThrowOnError>({
    ...options,
    url: '/melding/'
}); };

/**
 * Melding:List
 */
export const getMelding = <ThrowOnError extends boolean = false>(options?: Options<GetMeldingData, ThrowOnError>) => { return (options?.client ?? client).get<GetMeldingResponse, GetMeldingError, ThrowOnError>({
    ...options,
    url: '/melding/'
}); };

/**
 * Melding:Retrieve
 */
export const getMeldingByMeldingId = <ThrowOnError extends boolean = false>(options: Options<GetMeldingByMeldingIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetMeldingByMeldingIdResponse, GetMeldingByMeldingIdError, ThrowOnError>({
    ...options,
    url: '/melding/{melding_id}'
}); };

/**
 * Melding:Update
 */
export const patchMeldingByMeldingId = <ThrowOnError extends boolean = false>(options: Options<PatchMeldingByMeldingIdData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchMeldingByMeldingIdResponse, PatchMeldingByMeldingIdError, ThrowOnError>({
    ...options,
    url: '/melding/{melding_id}'
}); };

/**
 * Melding:Answer Questions
 */
export const putMeldingByMeldingIdAnswerQuestions = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdAnswerQuestionsData, ThrowOnError>) => { return (options?.client ?? client).put<PutMeldingByMeldingIdAnswerQuestionsResponse, PutMeldingByMeldingIdAnswerQuestionsError, ThrowOnError>({
    ...options,
    url: '/melding/{melding_id}/answer_questions'
}); };

/**
 * Melding:Process
 */
export const putMeldingByMeldingIdProcess = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdProcessData, ThrowOnError>) => { return (options?.client ?? client).put<PutMeldingByMeldingIdProcessResponse, PutMeldingByMeldingIdProcessError, ThrowOnError>({
    ...options,
    url: '/melding/{melding_id}/process'
}); };

/**
 * Melding:Complete
 */
export const putMeldingByMeldingIdComplete = <ThrowOnError extends boolean = false>(options: Options<PutMeldingByMeldingIdCompleteData, ThrowOnError>) => { return (options?.client ?? client).put<PutMeldingByMeldingIdCompleteResponse, PutMeldingByMeldingIdCompleteError, ThrowOnError>({
    ...options,
    url: '/melding/{melding_id}/complete'
}); };

/**
 * Melding:Answer-Question
 */
export const postMeldingByMeldingIdQuestionByQuestionId = <ThrowOnError extends boolean = false>(options: Options<PostMeldingByMeldingIdQuestionByQuestionIdData, ThrowOnError>) => { return (options?.client ?? client).post<PostMeldingByMeldingIdQuestionByQuestionIdResponse, PostMeldingByMeldingIdQuestionByQuestionIdError, ThrowOnError>({
    ...options,
    url: '/melding/{melding_id}/question/{question_id}'
}); };

/**
 * Melding:Attachment
 */
export const postMeldingByMeldingIdAttachment = <ThrowOnError extends boolean = false>(options: Options<PostMeldingByMeldingIdAttachmentData, ThrowOnError>) => { return (options?.client ?? client).post<PostMeldingByMeldingIdAttachmentResponse, PostMeldingByMeldingIdAttachmentError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null
    },
    url: '/melding/{melding_id}/attachment'
}); };

/**
 * User:Create
 */
export const postUser = <ThrowOnError extends boolean = false>(options: Options<PostUserData, ThrowOnError>) => { return (options?.client ?? client).post<PostUserResponse, PostUserError, ThrowOnError>({
    ...options,
    url: '/user/'
}); };

/**
 * User:List
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/user/'
}); };

/**
 * User:Retrieve
 */
export const getUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserByUserIdResponse, GetUserByUserIdError, ThrowOnError>({
    ...options,
    url: '/user/{user_id}'
}); };

/**
 * User:Delete
 */
export const deleteUserByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByUserIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteUserByUserIdResponse, DeleteUserByUserIdError, ThrowOnError>({
    ...options,
    url: '/user/{user_id}'
}); };

/**
 * User:Update
 */
export const patchUserByUserId = <ThrowOnError extends boolean = false>(options: Options<PatchUserByUserIdData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchUserByUserIdResponse, PatchUserByUserIdError, ThrowOnError>({
    ...options,
    url: '/user/{user_id}'
}); };

/**
 * Form:List
 */
export const getForm = <ThrowOnError extends boolean = false>(options?: Options<GetFormData, ThrowOnError>) => { return (options?.client ?? client).get<GetFormResponse, GetFormError, ThrowOnError>({
    ...options,
    url: '/form/'
}); };

/**
 * Form:Create
 */
export const postForm = <ThrowOnError extends boolean = false>(options: Options<PostFormData, ThrowOnError>) => { return (options?.client ?? client).post<PostFormResponse, PostFormError, ThrowOnError>({
    ...options,
    url: '/form/'
}); };

/**
 * Form:Retrieve
 */
export const getFormByFormId = <ThrowOnError extends boolean = false>(options: Options<GetFormByFormIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetFormByFormIdResponse, GetFormByFormIdError, ThrowOnError>({
    ...options,
    url: '/form/{form_id}'
}); };

/**
 * Form:Update
 */
export const putFormByFormId = <ThrowOnError extends boolean = false>(options: Options<PutFormByFormIdData, ThrowOnError>) => { return (options?.client ?? client).put<PutFormByFormIdResponse, PutFormByFormIdError, ThrowOnError>({
    ...options,
    url: '/form/{form_id}'
}); };

/**
 * Form:Delete
 */
export const deleteFormByFormId = <ThrowOnError extends boolean = false>(options: Options<DeleteFormByFormIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteFormByFormIdResponse, DeleteFormByFormIdError, ThrowOnError>({
    ...options,
    url: '/form/{form_id}'
}); };

/**
 * Form:Classification
 */
export const getFormClassificationByClassificationId = <ThrowOnError extends boolean = false>(options: Options<GetFormClassificationByClassificationIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetFormClassificationByClassificationIdResponse, GetFormClassificationByClassificationIdError, ThrowOnError>({
    ...options,
    url: '/form/classification/{classification_id}'
}); };

/**
 * Static-Form:Retrieve-By-Type
 */
export const getStaticFormByFormType = <ThrowOnError extends boolean = false>(options: Options<GetStaticFormByFormTypeData, ThrowOnError>) => { return (options?.client ?? client).get<GetStaticFormByFormTypeResponse, GetStaticFormByFormTypeError, ThrowOnError>({
    ...options,
    url: '/static-form/{form_type}'
}); };

/**
 * Static-Form:Update
 */
export const putStaticFormByFormType = <ThrowOnError extends boolean = false>(options: Options<PutStaticFormByFormTypeData, ThrowOnError>) => { return (options?.client ?? client).put<PutStaticFormByFormTypeResponse, PutStaticFormByFormTypeError, ThrowOnError>({
    ...options,
    url: '/static-form/{form_type}'
}); };