// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};

/**
 * Add
 */
export type Add = {
    /**
     * +
     */
    '+': Array<number | number | string | Var>;
};

/**
 * All
 */
export type AllInput = {
    /**
     * All
     */
    all: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * All
 */
export type AllOutput = {
    /**
     * All
     */
    all: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * And
 */
export type AndInput = {
    /**
     * And
     */
    and: Array<boolean | number | number | string | Array<null> | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length>;
};

/**
 * And
 */
export type AndOutput = {
    /**
     * And
     */
    and: Array<boolean | number | number | string | Array<null> | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length>;
};

/**
 * AnswerInput
 */
export type AnswerInput = {
    /**
     * Text
     */
    text: string;
};

/**
 * AnswerOutput
 */
export type AnswerOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Text
     */
    text: string;
};

/**
 * AnswerQuestionOutput
 */
export type AnswerQuestionOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Text
     */
    text: string;
    question: QuestionOutput;
};

/**
 * AssetTypeInput
 */
export type AssetTypeInput = {
    /**
     * Name
     */
    name: string;
    /**
     * Class Name
     */
    class_name: string;
    /**
     * Arguments
     */
    arguments: {
        [key: string]: unknown;
    };
};

/**
 * AssetTypeOutput
 */
export type AssetTypeOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name: string;
    /**
     * Class Name
     */
    class_name: string;
    /**
     * Arguments
     */
    arguments: {
        [key: string]: unknown;
    };
};

/**
 * AssetTypeUpdateInput
 */
export type AssetTypeUpdateInput = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Class Name
     */
    class_name?: string | null;
    /**
     * Arguments
     */
    arguments?: {
        [key: string]: unknown;
    } | null;
};

/**
 * AttachmentOutput
 */
export type AttachmentOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Original Filename
     */
    original_filename: string;
};

/**
 * AttachmentTypes
 */
export type AttachmentTypes = 'original' | 'optimized' | 'thumbnail';

/**
 * BaseModel
 */
export type BaseModel = {
    [key: string]: unknown;
};

/**
 * Body_melding_attachment_melding__melding_id__attachment_post
 */
export type BodyMeldingAttachmentMeldingMeldingIdAttachmentPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Cat
 */
export type Cat = {
    /**
     * Cat
     */
    cat: number | number | string | boolean | Array<number | number | string | boolean>;
};

/**
 * ClassificationCreateInput
 */
export type ClassificationCreateInput = {
    /**
     * Name
     */
    name: string;
    /**
     * Asset Type
     */
    asset_type?: number | null;
};

/**
 * ClassificationOutput
 */
export type ClassificationOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name: string;
    /**
     * Form
     */
    form?: number | null;
    /**
     * Asset Type
     */
    asset_type?: number | null;
};

/**
 * ClassificationUpdateInput
 */
export type ClassificationUpdateInput = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Asset Type
     */
    asset_type?: number | null;
};

/**
 * CompleteMeldingInput
 */
export type CompleteMeldingInput = {
    /**
     * Mail Body
     */
    mail_body: string;
};

/**
 * Divide
 */
export type Divide = {
    /**
     * /
     */
    '/': [
        number | number | string,
        number | number | string
    ];
};

/**
 * Equals
 */
export type Equals = {
    /**
     * ==
     */
    '==': [
        unknown,
        unknown
    ];
};

/**
 * Feature
 *
 * Feature Model
 */
export type Feature = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'Feature';
    /**
     * Geometry
     */
    geometry: ({
        type: 'Point';
    } & Point) | ({
        type: 'MultiPoint';
    } & MultiPoint) | ({
        type: 'LineString';
    } & LineString) | ({
        type: 'MultiLineString';
    } & MultiLineString) | ({
        type: 'Polygon';
    } & Polygon) | ({
        type: 'MultiPolygon';
    } & MultiPolygon) | ({
        type: 'GeometryCollection';
    } & GeometryCollection) | null;
    /**
     * Properties
     */
    properties: {
        [key: string]: unknown;
    } | BaseModel | null;
    /**
     * Id
     */
    id?: number | string | null;
};

/**
 * FeatureCollection
 *
 * FeatureCollection Model
 */
export type FeatureCollection = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'FeatureCollection';
    /**
     * Features
     */
    features: Array<Feature>;
};

/**
 * Filter
 */
export type FilterInput = {
    /**
     * Filter
     */
    filter: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * Filter
 */
export type FilterOutput = {
    /**
     * Filter
     */
    filter: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * FormCheckboxComponentInput
 */
export type FormCheckboxComponentInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Key
     */
    key: string;
    type?: FormIoComponentTypeEnum;
    /**
     * Input
     */
    input: boolean;
    validate?: FormComponentInputValidate | null;
    /**
     * Values
     */
    values: Array<FormComponentValueInput>;
};

/**
 * FormCheckboxComponentOutput
 */
export type FormCheckboxComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Values
     */
    values: Array<FormComponentValueOutput>;
    /**
     * Question
     */
    question: number;
};

/**
 * FormComponentInputValidate
 */
export type FormComponentInputValidate = {
    /**
     * Json
     */
    json?: Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length | null;
    /**
     * Required
     */
    required?: boolean;
    /**
     * Required Error Message
     */
    required_error_message?: string | null;
};

/**
 * FormComponentOutputValidate
 */
export type FormComponentOutputValidate = {
    /**
     * Json
     */
    json?: Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length | null;
    /**
     * Required
     */
    required: boolean;
    /**
     * Required Error Message
     */
    required_error_message: string | null;
};

/**
 * FormComponentValueInput
 */
export type FormComponentValueInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Value
     */
    value: string;
};

/**
 * FormComponentValueOutput
 */
export type FormComponentValueOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Value
     */
    value: string;
    /**
     * Position
     */
    position: number;
};

/**
 * FormInput
 */
export type FormInput = {
    /**
     * Title
     */
    title: string;
    display: FormIoFormDisplayEnum;
    /**
     * Components
     */
    components: Array<FormPanelComponentInput | FormTextAreaComponentInput | FormTextFieldComponentInput | FormRadioComponentInput | FormCheckboxComponentInput | FormSelectComponentInput>;
    /**
     * Classification
     */
    classification?: number | null;
};

/**
 * FormIoComponentTypeEnum
 *
 * The value of the type field
 */
export type FormIoComponentTypeEnum = 'panel' | 'textarea' | 'textfield' | 'selectboxes' | 'radio' | 'select';

/**
 * FormIoFormDisplayEnum
 *
 * The value of the display field on the form can be one of the following:
 * - form
 * - wizard
 * - pdf
 */
export type FormIoFormDisplayEnum = 'form' | 'wizard' | 'pdf';

/**
 * FormOutput
 */
export type FormOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Title
     */
    title: string;
    /**
     * Display
     */
    display: string;
    /**
     * Classification
     */
    classification?: number | null;
    /**
     * Components
     */
    components: Array<FormPanelComponentOutput | FormTextAreaComponentOutput | FormTextFieldInputComponentOutput | FormCheckboxComponentOutput | FormRadioComponentOutput | FormSelectComponentOutput>;
};

/**
 * FormPanelComponentInput
 */
export type FormPanelComponentInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Title
     */
    title: string;
    /**
     * Key
     */
    key: string;
    type?: FormIoComponentTypeEnum;
    /**
     * Input
     */
    input?: boolean;
    /**
     * Components
     */
    components: Array<FormTextAreaComponentInput | FormTextFieldComponentInput | FormRadioComponentInput | FormCheckboxComponentInput | FormSelectComponentInput>;
};

/**
 * FormPanelComponentOutput
 */
export type FormPanelComponentOutput = {
    /**
     * Title
     */
    title: string;
    /**
     * Label
     */
    label: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    /**
     * Components
     */
    components: Array<FormTextAreaComponentOutput | FormTextFieldInputComponentOutput | FormCheckboxComponentOutput | FormRadioComponentOutput | FormSelectComponentOutput>;
};

/**
 * FormRadioComponentInput
 */
export type FormRadioComponentInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Key
     */
    key: string;
    type?: FormIoComponentTypeEnum;
    /**
     * Input
     */
    input: boolean;
    validate?: FormComponentInputValidate | null;
    /**
     * Values
     */
    values: Array<FormComponentValueInput>;
};

/**
 * FormRadioComponentOutput
 */
export type FormRadioComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Values
     */
    values: Array<FormComponentValueOutput>;
    /**
     * Question
     */
    question: number;
};

/**
 * FormSelectComponentDataInput
 */
export type FormSelectComponentDataInput = {
    /**
     * Values
     */
    values: Array<FormComponentValueInput>;
};

/**
 * FormSelectComponentDataOutput
 */
export type FormSelectComponentDataOutput = {
    /**
     * Values
     */
    values: Array<FormComponentValueOutput>;
};

/**
 * FormSelectComponentInput
 */
export type FormSelectComponentInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Key
     */
    key: string;
    type?: FormIoComponentTypeEnum;
    /**
     * Input
     */
    input: boolean;
    validate?: FormComponentInputValidate | null;
    /**
     * Widget
     */
    widget: string;
    /**
     * Placeholder
     */
    placeholder: string;
    data: FormSelectComponentDataInput;
};

/**
 * FormSelectComponentOutput
 */
export type FormSelectComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Widget
     */
    widget: string;
    /**
     * Placeholder
     */
    placeholder: string;
    data: FormSelectComponentDataOutput;
    /**
     * Question
     */
    question: number;
};

/**
 * FormTextAreaComponentInput
 */
export type FormTextAreaComponentInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Key
     */
    key: string;
    type?: FormIoComponentTypeEnum;
    /**
     * Input
     */
    input: boolean;
    validate?: FormComponentInputValidate | null;
    /**
     * Autoexpand
     */
    autoExpand: boolean;
    /**
     * Maxcharcount
     */
    maxCharCount?: number | null;
};

/**
 * FormTextAreaComponentOutput
 */
export type FormTextAreaComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Autoexpand
     */
    autoExpand: boolean;
    /**
     * Maxcharcount
     */
    maxCharCount: number | null;
    /**
     * Question
     */
    question: number;
};

/**
 * FormTextFieldComponentInput
 */
export type FormTextFieldComponentInput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Key
     */
    key: string;
    type?: FormIoComponentTypeEnum;
    /**
     * Input
     */
    input: boolean;
    validate?: FormComponentInputValidate | null;
};

/**
 * FormTextFieldInputComponentOutput
 */
export type FormTextFieldInputComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Question
     */
    question: number;
};

/**
 * GeoJson
 */
export type GeoJsonInput = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'Feature';
    geometry: Point | null;
    /**
     * Properties
     */
    properties: {
        [key: string]: unknown;
    } | BaseModel | null;
    /**
     * Id
     */
    id?: number | string | null;
};

/**
 * GeoJson
 */
export type GeoJsonOutput = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'Feature';
    geometry: Point | null;
    /**
     * Properties
     */
    properties: {
        [key: string]: unknown;
    } | BaseModel | null;
    /**
     * Id
     */
    id?: number | string | null;
};

/**
 * GeometryCollection
 *
 * GeometryCollection Model
 */
export type GeometryCollection = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'GeometryCollection';
    /**
     * Geometries
     */
    geometries: Array<({
        type: 'Point';
    } & Point) | ({
        type: 'MultiPoint';
    } & MultiPoint) | ({
        type: 'LineString';
    } & LineString) | ({
        type: 'MultiLineString';
    } & MultiLineString) | ({
        type: 'Polygon';
    } & Polygon) | ({
        type: 'MultiPolygon';
    } & MultiPolygon) | ({
        type: 'GeometryCollection';
    } & GeometryCollection)>;
};

/**
 * GreaterThan
 */
export type GreaterThan = {
    /**
     * >
     */
    '>': [
        number | number | string | Var,
        number | number | string
    ];
};

/**
 * GreaterThanOrEqual
 */
export type GreaterThanOrEqual = {
    /**
     * >=
     */
    '>=': [
        number | number | string | Var,
        number | number | string
    ];
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * If
 */
export type If = {
    /**
     * If
     */
    if: Array<unknown>;
};

/**
 * In
 */
export type InInput = {
    /**
     * In
     */
    in: [
        number | string | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length,
        Array<number | string> | string
    ];
};

/**
 * In
 */
export type InOutput = {
    /**
     * In
     */
    in: [
        number | string | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length,
        Array<number | string> | string
    ];
};

/**
 * Length
 */
export type Length = {
    /**
     * Length
     */
    length: string | [
        string | Var | If | Substr
    ];
};

/**
 * LessThan
 */
export type LessThan = {
    /**
     * <
     */
    '<': [
        number | number | string | Var,
        number | number | string
    ] | [
        number | number,
        number | number,
        number | number
    ];
};

/**
 * LessThanOrEqual
 */
export type LessThanOrEqual = {
    /**
     * <=
     */
    '<=': [
        number | number | string,
        number | number | string
    ] | [
        number | number,
        number | number,
        number | number
    ];
};

/**
 * LineString
 *
 * LineString Model
 */
export type LineString = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'LineString';
    /**
     * Coordinates
     */
    coordinates: Array<Position2d | Position3d>;
};

/**
 * Log
 */
export type Log = {
    /**
     * Log
     */
    log: number | number | string | boolean | Array<number | number | string | boolean>;
};

/**
 * MailPreviewInput
 */
export type MailPreviewInput = {
    /**
     * Title
     */
    title: string;
    /**
     * Preview Text
     */
    preview_text: string;
    /**
     * Body Text
     */
    body_text: string;
};

/**
 * Map
 */
export type MapInput = {
    /**
     * Map
     */
    map: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * Map
 */
export type MapOutput = {
    /**
     * Map
     */
    map: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * Max
 */
export type Max = {
    /**
     * Max
     */
    max: Array<number | number>;
};

/**
 * MeldingAssetInput
 */
export type MeldingAssetInput = {
    /**
     * External Id
     */
    external_id: string;
    /**
     * Asset Type Id
     */
    asset_type_id: number;
};

/**
 * MeldingContactInput
 */
export type MeldingContactInput = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
};

/**
 * MeldingCreateOutput
 */
export type MeldingCreateOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Public Id
     */
    public_id: string;
    /**
     * Text
     */
    text: string;
    /**
     * State
     */
    state: string;
    classification?: SimpleClassificationOutput | null;
    geo_location?: GeoJsonOutput | null;
    /**
     * Street
     */
    street?: string | null;
    /**
     * House Number
     */
    house_number?: number | null;
    /**
     * House Number Addition
     */
    house_number_addition?: string | null;
    /**
     * Postal Code
     */
    postal_code?: string | null;
    /**
     * City
     */
    city?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Token
     */
    token: string;
};

/**
 * MeldingInput
 */
export type MeldingInput = {
    /**
     * Text
     */
    text: string;
};

/**
 * MeldingOutput
 */
export type MeldingOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Public Id
     */
    public_id: string;
    /**
     * Text
     */
    text: string;
    /**
     * State
     */
    state: string;
    classification?: SimpleClassificationOutput | null;
    geo_location?: GeoJsonOutput | null;
    /**
     * Street
     */
    street?: string | null;
    /**
     * House Number
     */
    house_number?: number | null;
    /**
     * House Number Addition
     */
    house_number_addition?: string | null;
    /**
     * Postal Code
     */
    postal_code?: string | null;
    /**
     * City
     */
    city?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
};

/**
 * MeldingUpdateOutput
 */
export type MeldingUpdateOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Public Id
     */
    public_id: string;
    /**
     * Text
     */
    text: string;
    /**
     * State
     */
    state: string;
    classification?: SimpleClassificationOutput | null;
    geo_location?: GeoJsonOutput | null;
    /**
     * Street
     */
    street?: string | null;
    /**
     * House Number
     */
    house_number?: number | null;
    /**
     * House Number Addition
     */
    house_number_addition?: string | null;
    /**
     * Postal Code
     */
    postal_code?: string | null;
    /**
     * City
     */
    city?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Token
     */
    token: string;
};

/**
 * Merge
 */
export type Merge = {
    /**
     * Merge
     */
    merge: unknown;
};

/**
 * Min
 */
export type Min = {
    /**
     * Min
     */
    min: Array<number | number>;
};

/**
 * Missing
 */
export type Missing = {
    /**
     * Missing
     */
    missing: Array<string> | string | Merge;
};

/**
 * MissingSome
 */
export type MissingSome = {
    /**
     * Missing Some
     */
    missing_some: [
        number,
        Array<string>
    ];
};

/**
 * Modulo
 */
export type Modulo = {
    /**
     * %
     */
    '%': [
        number | number | string | Var,
        number | number | string
    ];
};

/**
 * MultiLineString
 *
 * MultiLineString Model
 */
export type MultiLineString = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'MultiLineString';
    /**
     * Coordinates
     */
    coordinates: Array<Array<Position2d | Position3d>>;
};

/**
 * MultiPoint
 *
 * MultiPoint Model
 */
export type MultiPoint = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'MultiPoint';
    /**
     * Coordinates
     */
    coordinates: Array<Position2d | Position3d>;
};

/**
 * MultiPolygon
 *
 * MultiPolygon Model
 */
export type MultiPolygon = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'MultiPolygon';
    /**
     * Coordinates
     */
    coordinates: Array<Array<Array<Position2d | Position3d>>>;
};

/**
 * Multiply
 */
export type Multiply = {
    /**
     * *
     */
    '*': Array<number | number | string | Var>;
};

/**
 * None_
 */
export type NoneInput = {
    /**
     * None
     */
    none: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * None_
 */
export type NoneOutput = {
    /**
     * None
     */
    none: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * Not
 */
export type Not = {
    /**
     * !
     */
    '!': [
        boolean | number | number | string
    ] | boolean | number | number | string | [
        Array<null>
    ];
};

/**
 * NotEquals
 */
export type NotEquals = {
    /**
     * !=
     */
    '!=': [
        unknown,
        unknown
    ];
};

/**
 * NotNot
 */
export type NotNot = {
    /**
     * !!
     */
    '!!': [
        number | number | string | Array<null> | boolean
    ] | number | number | string | boolean;
};

/**
 * Or
 */
export type OrInput = {
    /**
     * Or
     */
    or: Array<boolean | number | number | string | Array<null> | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length>;
};

/**
 * Or
 */
export type OrOutput = {
    /**
     * Or
     */
    or: Array<boolean | number | number | string | Array<null> | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length>;
};

/**
 * Point
 *
 * Point Model
 */
export type Point = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'Point';
    /**
     * Coordinates
     */
    coordinates: Position2d | Position3d;
};

/**
 * Polygon
 *
 * Polygon Model
 */
export type Polygon = {
    /**
     * Bbox
     */
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    /**
     * Type
     */
    type: 'Polygon';
    /**
     * Coordinates
     */
    coordinates: Array<Array<Position2d | Position3d>>;
};

export type Position2d = [
    number,
    number
];

export type Position3d = [
    number,
    number,
    number
];

/**
 * QuestionOutput
 */
export type QuestionOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Text
     */
    text: string;
};

/**
 * Reduce
 */
export type ReduceInput = {
    /**
     * Reduce
     */
    reduce: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length,
        unknown
    ];
};

/**
 * Reduce
 */
export type ReduceOutput = {
    /**
     * Reduce
     */
    reduce: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length,
        unknown
    ];
};

/**
 * SimpleClassificationOutput
 */
export type SimpleClassificationOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Name
     */
    name: string;
};

/**
 * SimpleFormOutput
 */
export type SimpleFormOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Title
     */
    title: string;
    /**
     * Display
     */
    display: string;
    /**
     * Classification
     */
    classification?: number | null;
};

/**
 * SimpleStaticFormOutput
 */
export type SimpleStaticFormOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Title
     */
    title: string;
    /**
     * Display
     */
    display: string;
    /**
     * Type
     */
    type: string;
};

/**
 * Some
 */
export type SomeInput = {
    /**
     * Some
     */
    some: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * Some
 */
export type SomeOutput = {
    /**
     * Some
     */
    some: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | Length
    ];
};

/**
 * StatesOutput
 */
export type StatesOutput = {
    /**
     * States
     */
    states: Array<string>;
};

/**
 * StaticFormCheckboxComponentOutput
 */
export type StaticFormCheckboxComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Values
     */
    values: Array<FormComponentValueOutput>;
};

/**
 * StaticFormInput
 */
export type StaticFormInput = {
    /**
     * Title
     */
    title: string;
    display: FormIoFormDisplayEnum;
    /**
     * Components
     */
    components: Array<FormPanelComponentInput | FormTextAreaComponentInput | FormTextFieldComponentInput | FormRadioComponentInput | FormCheckboxComponentInput | FormSelectComponentInput>;
};

/**
 * StaticFormOutput
 */
export type StaticFormOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Title
     */
    title: string;
    /**
     * Display
     */
    display: string;
    /**
     * Type
     */
    type: string;
    /**
     * Components
     */
    components: Array<StaticFormPanelComponentOutput | StaticFormTextAreaComponentOutput | StaticFormTextFieldInputComponentOutput | StaticFormCheckboxComponentOutput | StaticFormRadioComponentOutput | StaticFormSelectComponentOutput>;
};

/**
 * StaticFormPanelComponentOutput
 */
export type StaticFormPanelComponentOutput = {
    /**
     * Title
     */
    title: string;
    /**
     * Label
     */
    label: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    /**
     * Components
     */
    components: Array<StaticFormTextAreaComponentOutput | StaticFormTextFieldInputComponentOutput | StaticFormCheckboxComponentOutput | StaticFormRadioComponentOutput | StaticFormSelectComponentOutput>;
};

/**
 * StaticFormRadioComponentOutput
 */
export type StaticFormRadioComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Values
     */
    values: Array<FormComponentValueOutput>;
};

/**
 * StaticFormSelectComponentOutput
 */
export type StaticFormSelectComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Widget
     */
    widget: string;
    /**
     * Placeholder
     */
    placeholder: string;
    data: FormSelectComponentDataOutput;
};

/**
 * StaticFormTextAreaComponentOutput
 */
export type StaticFormTextAreaComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
    /**
     * Autoexpand
     */
    autoExpand: boolean;
    /**
     * Maxcharcount
     */
    maxCharCount: number | null;
};

/**
 * StaticFormTextFieldInputComponentOutput
 */
export type StaticFormTextFieldInputComponentOutput = {
    /**
     * Label
     */
    label: string;
    /**
     * Description
     */
    description: string;
    /**
     * Key
     */
    key: string;
    /**
     * Type
     */
    type: string;
    /**
     * Input
     */
    input: boolean;
    /**
     * Position
     */
    position: number;
    validate?: FormComponentOutputValidate | null;
};

/**
 * StrictEquals
 */
export type StrictEquals = {
    /**
     * ===
     */
    '===': [
        unknown,
        unknown
    ];
};

/**
 * StrictNotEquals
 */
export type StrictNotEquals = {
    /**
     * !==
     */
    '!==': [
        unknown,
        unknown
    ];
};

/**
 * Substr
 */
export type Substr = {
    /**
     * Substr
     */
    substr: [
        string,
        number
    ] | [
        string,
        number,
        number
    ];
};

/**
 * Subtract
 */
export type Subtract = {
    /**
     * -
     */
    '-': [
        number | number | string
    ] | [
        number | number | string,
        number | number | string
    ];
};

/**
 * UserCreateInput
 */
export type UserCreateInput = {
    /**
     * Username
     */
    username: string;
    /**
     * Email
     */
    email: string;
};

/**
 * UserOutput
 */
export type UserOutput = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Email
     */
    email: string;
    /**
     * Username
     */
    username: string;
};

/**
 * UserUpdateInput
 */
export type UserUpdateInput = {
    /**
     * Username
     */
    username?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * Var
 */
export type Var = {
    /**
     * Var
     */
    var: [
        string
    ] | string | [
        string,
        unknown
    ] | number | number | Array<null> | null;
};

export type GetAttachmentByIdData = {
    body?: never;
    path: {
        /**
         * Id
         *
         * The id of the attachment.
         */
        id: number;
    };
    query?: {
        /**
         * The type of the attachment to download.
         */
        type?: AttachmentTypes;
    };
    url: '/attachment/{id}';
};

export type GetAttachmentByIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAttachmentByIdError = GetAttachmentByIdErrors[keyof GetAttachmentByIdErrors];

export type GetAttachmentByIdResponses = {
    /**
     * The binary image data
     */
    200: Blob | File;
};

export type GetAttachmentByIdResponse = GetAttachmentByIdResponses[keyof GetAttachmentByIdResponses];

export type GetClassificationData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The limit
         */
        limit?: number;
        /**
         * The offset of the page
         */
        offset?: number | null;
        /**
         * Sort
         */
        sort?: string;
    };
    url: '/classification/';
};

export type GetClassificationErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClassificationError = GetClassificationErrors[keyof GetClassificationErrors];

export type GetClassificationResponses = {
    /**
     * Response Classification List Classification  Get
     *
     * Successful Response
     */
    200: Array<ClassificationOutput>;
};

export type GetClassificationResponse = GetClassificationResponses[keyof GetClassificationResponses];

export type PostClassificationData = {
    body: ClassificationCreateInput;
    path?: never;
    query?: never;
    url: '/classification/';
};

export type PostClassificationErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Conflict, a uniqueness error occurred
     */
    409: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostClassificationError = PostClassificationErrors[keyof PostClassificationErrors];

export type PostClassificationResponses = {
    /**
     * Successful Response
     */
    201: ClassificationOutput;
};

export type PostClassificationResponse = PostClassificationResponses[keyof PostClassificationResponses];

export type DeleteClassificationByClassificationIdData = {
    body?: never;
    path: {
        /**
         * Classification Id
         *
         * The classification id.
         */
        classification_id: number;
    };
    query?: never;
    url: '/classification/{classification_id}';
};

export type DeleteClassificationByClassificationIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteClassificationByClassificationIdError = DeleteClassificationByClassificationIdErrors[keyof DeleteClassificationByClassificationIdErrors];

export type DeleteClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteClassificationByClassificationIdResponse = DeleteClassificationByClassificationIdResponses[keyof DeleteClassificationByClassificationIdResponses];

export type GetClassificationByClassificationIdData = {
    body?: never;
    path: {
        /**
         * Classification Id
         *
         * The classification id.
         */
        classification_id: number;
    };
    query?: never;
    url: '/classification/{classification_id}';
};

export type GetClassificationByClassificationIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClassificationByClassificationIdError = GetClassificationByClassificationIdErrors[keyof GetClassificationByClassificationIdErrors];

export type GetClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    200: ClassificationOutput;
};

export type GetClassificationByClassificationIdResponse = GetClassificationByClassificationIdResponses[keyof GetClassificationByClassificationIdResponses];

export type PatchClassificationByClassificationIdData = {
    body: ClassificationUpdateInput;
    path: {
        /**
         * Classification Id
         *
         * The classification id.
         */
        classification_id: number;
    };
    query?: never;
    url: '/classification/{classification_id}';
};

export type PatchClassificationByClassificationIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Conflict, a uniqueness error occurred
     */
    409: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchClassificationByClassificationIdError = PatchClassificationByClassificationIdErrors[keyof PatchClassificationByClassificationIdErrors];

export type PatchClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    200: ClassificationOutput;
};

export type PatchClassificationByClassificationIdResponse = PatchClassificationByClassificationIdResponses[keyof PatchClassificationByClassificationIdResponses];

export type PostMailPreviewData = {
    body: MailPreviewInput;
    path?: never;
    query?: never;
    url: '/mail/preview';
};

export type PostMailPreviewErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMailPreviewError = PostMailPreviewErrors[keyof PostMailPreviewErrors];

export type PostMailPreviewResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type PostMailPreviewResponse = PostMailPreviewResponses[keyof PostMailPreviewResponses];

export type GetMeldingData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * In Area
         */
        in_area?: string | null;
        /**
         * State
         */
        state?: string | null;
        /**
         * The limit
         */
        limit?: number;
        /**
         * The offset of the page
         */
        offset?: number | null;
        /**
         * Sort
         */
        sort?: string;
    };
    url: '/melding/';
};

export type GetMeldingErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingError = GetMeldingErrors[keyof GetMeldingErrors];

export type GetMeldingResponses = {
    /**
     * Response Melding List Melding  Get
     *
     * Successful Response
     */
    200: Array<MeldingOutput>;
};

export type GetMeldingResponse = GetMeldingResponses[keyof GetMeldingResponses];

export type PostMeldingData = {
    body: MeldingInput;
    path?: never;
    query?: never;
    url: '/melding/';
};

export type PostMeldingErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingError = PostMeldingErrors[keyof PostMeldingErrors];

export type PostMeldingResponses = {
    /**
     * Successful Response
     */
    201: MeldingCreateOutput;
};

export type PostMeldingResponse = PostMeldingResponses[keyof PostMeldingResponses];

export type GetMeldingByMeldingIdData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}';
};

export type GetMeldingByMeldingIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdError = GetMeldingByMeldingIdErrors[keyof GetMeldingByMeldingIdErrors];

export type GetMeldingByMeldingIdResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type GetMeldingByMeldingIdResponse = GetMeldingByMeldingIdResponses[keyof GetMeldingByMeldingIdResponses];

export type PatchMeldingByMeldingIdData = {
    body: MeldingInput;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}';
};

export type PatchMeldingByMeldingIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchMeldingByMeldingIdError = PatchMeldingByMeldingIdErrors[keyof PatchMeldingByMeldingIdErrors];

export type PatchMeldingByMeldingIdResponses = {
    /**
     * Successful Response
     */
    200: MeldingUpdateOutput;
};

export type PatchMeldingByMeldingIdResponse = PatchMeldingByMeldingIdResponses[keyof PatchMeldingByMeldingIdResponses];

export type GetMeldingByMeldingIdMelderData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/melder';
};

export type GetMeldingByMeldingIdMelderErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdMelderError = GetMeldingByMeldingIdMelderErrors[keyof GetMeldingByMeldingIdMelderErrors];

export type GetMeldingByMeldingIdMelderResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type GetMeldingByMeldingIdMelderResponse = GetMeldingByMeldingIdMelderResponses[keyof GetMeldingByMeldingIdMelderResponses];

export type PutMeldingByMeldingIdAnswerQuestionsData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/answer_questions';
};

export type PutMeldingByMeldingIdAnswerQuestionsErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdAnswerQuestionsError = PutMeldingByMeldingIdAnswerQuestionsErrors[keyof PutMeldingByMeldingIdAnswerQuestionsErrors];

export type PutMeldingByMeldingIdAnswerQuestionsResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdAnswerQuestionsResponse = PutMeldingByMeldingIdAnswerQuestionsResponses[keyof PutMeldingByMeldingIdAnswerQuestionsResponses];

export type PutMeldingByMeldingIdAddAttachmentsData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/add_attachments';
};

export type PutMeldingByMeldingIdAddAttachmentsErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdAddAttachmentsError = PutMeldingByMeldingIdAddAttachmentsErrors[keyof PutMeldingByMeldingIdAddAttachmentsErrors];

export type PutMeldingByMeldingIdAddAttachmentsResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdAddAttachmentsResponse = PutMeldingByMeldingIdAddAttachmentsResponses[keyof PutMeldingByMeldingIdAddAttachmentsResponses];

export type PutMeldingByMeldingIdSubmitLocationData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/submit_location';
};

export type PutMeldingByMeldingIdSubmitLocationErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdSubmitLocationError = PutMeldingByMeldingIdSubmitLocationErrors[keyof PutMeldingByMeldingIdSubmitLocationErrors];

export type PutMeldingByMeldingIdSubmitLocationResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdSubmitLocationResponse = PutMeldingByMeldingIdSubmitLocationResponses[keyof PutMeldingByMeldingIdSubmitLocationResponses];

export type PutMeldingByMeldingIdSubmitData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/submit';
};

export type PutMeldingByMeldingIdSubmitErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdSubmitError = PutMeldingByMeldingIdSubmitErrors[keyof PutMeldingByMeldingIdSubmitErrors];

export type PutMeldingByMeldingIdSubmitResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdSubmitResponse = PutMeldingByMeldingIdSubmitResponses[keyof PutMeldingByMeldingIdSubmitResponses];

export type PutMeldingByMeldingIdProcessData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/process';
};

export type PutMeldingByMeldingIdProcessErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdProcessError = PutMeldingByMeldingIdProcessErrors[keyof PutMeldingByMeldingIdProcessErrors];

export type PutMeldingByMeldingIdProcessResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdProcessResponse = PutMeldingByMeldingIdProcessResponses[keyof PutMeldingByMeldingIdProcessResponses];

export type PutMeldingByMeldingIdCompleteData = {
    /**
     * Input
     */
    body?: CompleteMeldingInput | null;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/complete';
};

export type PutMeldingByMeldingIdCompleteErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdCompleteError = PutMeldingByMeldingIdCompleteErrors[keyof PutMeldingByMeldingIdCompleteErrors];

export type PutMeldingByMeldingIdCompleteResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdCompleteResponse = PutMeldingByMeldingIdCompleteResponses[keyof PutMeldingByMeldingIdCompleteResponses];

export type PostMeldingByMeldingIdQuestionByQuestionIdData = {
    body: AnswerInput;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
        /**
         * Question Id
         *
         * The id of the question.
         */
        question_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/question/{question_id}';
};

export type PostMeldingByMeldingIdQuestionByQuestionIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostMeldingByMeldingIdQuestionByQuestionIdError = PostMeldingByMeldingIdQuestionByQuestionIdErrors[keyof PostMeldingByMeldingIdQuestionByQuestionIdErrors];

export type PostMeldingByMeldingIdQuestionByQuestionIdResponses = {
    /**
     * Successful Response
     */
    201: AnswerOutput;
};

export type PostMeldingByMeldingIdQuestionByQuestionIdResponse = PostMeldingByMeldingIdQuestionByQuestionIdResponses[keyof PostMeldingByMeldingIdQuestionByQuestionIdResponses];

export type PatchMeldingByMeldingIdAnswerByAnswerIdData = {
    body: AnswerInput;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
        /**
         * Answer Id
         *
         * The id of the answer.
         */
        answer_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/answer/{answer_id}';
};

export type PatchMeldingByMeldingIdAnswerByAnswerIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchMeldingByMeldingIdAnswerByAnswerIdError = PatchMeldingByMeldingIdAnswerByAnswerIdErrors[keyof PatchMeldingByMeldingIdAnswerByAnswerIdErrors];

export type PatchMeldingByMeldingIdAnswerByAnswerIdResponses = {
    /**
     * Successful Response
     */
    200: AnswerOutput;
};

export type PatchMeldingByMeldingIdAnswerByAnswerIdResponse = PatchMeldingByMeldingIdAnswerByAnswerIdResponses[keyof PatchMeldingByMeldingIdAnswerByAnswerIdResponses];

export type PostMeldingByMeldingIdAttachmentData = {
    body: BodyMeldingAttachmentMeldingMeldingIdAttachmentPost;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/attachment';
};

export type PostMeldingByMeldingIdAttachmentErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Uploading attachment that is too large.
     */
    413: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingByMeldingIdAttachmentError = PostMeldingByMeldingIdAttachmentErrors[keyof PostMeldingByMeldingIdAttachmentErrors];

export type PostMeldingByMeldingIdAttachmentResponses = {
    /**
     * Successful Response
     */
    200: AttachmentOutput;
};

export type PostMeldingByMeldingIdAttachmentResponse = PostMeldingByMeldingIdAttachmentResponses[keyof PostMeldingByMeldingIdAttachmentResponses];

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
        /**
         * Attachment Id
         *
         * The id of the attachment.
         */
        attachment_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
        /**
         * The type of the attachment to download.
         */
        type?: AttachmentTypes;
    };
    url: '/melding/{melding_id}/attachment/{attachment_id}/download';
};

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadError = GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadErrors[keyof GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadErrors];

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponses = {
    /**
     * The binary image data
     */
    200: Blob | File;
};

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponse = GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponses[keyof GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponses];

export type GetMeldingByMeldingIdAttachmentsData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/attachments';
};

export type GetMeldingByMeldingIdAttachmentsErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAttachmentsError = GetMeldingByMeldingIdAttachmentsErrors[keyof GetMeldingByMeldingIdAttachmentsErrors];

export type GetMeldingByMeldingIdAttachmentsResponses = {
    /**
     * Response Melding Attachments Melding  Melding Id  Attachments Get
     *
     * Successful Response
     */
    200: Array<AttachmentOutput>;
};

export type GetMeldingByMeldingIdAttachmentsResponse = GetMeldingByMeldingIdAttachmentsResponses[keyof GetMeldingByMeldingIdAttachmentsResponses];

export type GetMeldingByMeldingIdAttachmentsMelderData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/attachments/melder';
};

export type GetMeldingByMeldingIdAttachmentsMelderErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAttachmentsMelderError = GetMeldingByMeldingIdAttachmentsMelderErrors[keyof GetMeldingByMeldingIdAttachmentsMelderErrors];

export type GetMeldingByMeldingIdAttachmentsMelderResponses = {
    /**
     * Response Melding Attachments Melder Melding  Melding Id  Attachments Melder Get
     *
     * Successful Response
     */
    200: Array<AttachmentOutput>;
};

export type GetMeldingByMeldingIdAttachmentsMelderResponse = GetMeldingByMeldingIdAttachmentsMelderResponses[keyof GetMeldingByMeldingIdAttachmentsMelderResponses];

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
        /**
         * Attachment Id
         *
         * The id of the attachment.
         */
        attachment_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/attachment/{attachment_id}';
};

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdError = DeleteMeldingByMeldingIdAttachmentByAttachmentIdErrors[keyof DeleteMeldingByMeldingIdAttachmentByAttachmentIdErrors];

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PatchMeldingByMeldingIdLocationData = {
    body: GeoJsonInput;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/location';
};

export type PatchMeldingByMeldingIdLocationErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchMeldingByMeldingIdLocationError = PatchMeldingByMeldingIdLocationErrors[keyof PatchMeldingByMeldingIdLocationErrors];

export type PatchMeldingByMeldingIdLocationResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PatchMeldingByMeldingIdLocationResponse = PatchMeldingByMeldingIdLocationResponses[keyof PatchMeldingByMeldingIdLocationResponses];

export type PatchMeldingByMeldingIdContactData = {
    body: MeldingContactInput;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/contact';
};

export type PatchMeldingByMeldingIdContactErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchMeldingByMeldingIdContactError = PatchMeldingByMeldingIdContactErrors[keyof PatchMeldingByMeldingIdContactErrors];

export type PatchMeldingByMeldingIdContactResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PatchMeldingByMeldingIdContactResponse = PatchMeldingByMeldingIdContactResponses[keyof PatchMeldingByMeldingIdContactResponses];

export type PutMeldingByMeldingIdAddContactInfoData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/add_contact_info';
};

export type PutMeldingByMeldingIdAddContactInfoErrors = {
    /**
     * ResponseWithDetail
     *
     * Transition not allowed from current state
     */
    400: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdAddContactInfoError = PutMeldingByMeldingIdAddContactInfoErrors[keyof PutMeldingByMeldingIdAddContactInfoErrors];

export type PutMeldingByMeldingIdAddContactInfoResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdAddContactInfoResponse = PutMeldingByMeldingIdAddContactInfoResponses[keyof PutMeldingByMeldingIdAddContactInfoResponses];

export type GetMeldingByMeldingIdAnswersMelderData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/answers/melder';
};

export type GetMeldingByMeldingIdAnswersMelderErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAnswersMelderError = GetMeldingByMeldingIdAnswersMelderErrors[keyof GetMeldingByMeldingIdAnswersMelderErrors];

export type GetMeldingByMeldingIdAnswersMelderResponses = {
    /**
     * Response Melding Answers Melder Melding  Melding Id  Answers Melder Get
     *
     * Successful Response
     */
    200: Array<AnswerQuestionOutput>;
};

export type GetMeldingByMeldingIdAnswersMelderResponse = GetMeldingByMeldingIdAnswersMelderResponses[keyof GetMeldingByMeldingIdAnswersMelderResponses];

export type GetMeldingByMeldingIdAnswersData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/answers';
};

export type GetMeldingByMeldingIdAnswersErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAnswersError = GetMeldingByMeldingIdAnswersErrors[keyof GetMeldingByMeldingIdAnswersErrors];

export type GetMeldingByMeldingIdAnswersResponses = {
    /**
     * Response Melding Answers Melding  Melding Id  Answers Get
     *
     * Successful Response
     */
    200: Array<AnswerQuestionOutput>;
};

export type GetMeldingByMeldingIdAnswersResponse = GetMeldingByMeldingIdAnswersResponses[keyof GetMeldingByMeldingIdAnswersResponses];

export type PostMeldingByMeldingIdAssetData = {
    body: MeldingAssetInput;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/asset';
};

export type PostMeldingByMeldingIdAssetErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingByMeldingIdAssetError = PostMeldingByMeldingIdAssetErrors[keyof PostMeldingByMeldingIdAssetErrors];

export type PostMeldingByMeldingIdAssetResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PostMeldingByMeldingIdAssetResponse = PostMeldingByMeldingIdAssetResponses[keyof PostMeldingByMeldingIdAssetResponses];

export type DeleteMeldingByMeldingIdAssetByAssetIdData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
        /**
         * Asset Id
         *
         * The id of the asset.
         */
        asset_id: number;
    };
    query: {
        /**
         * Token
         *
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/asset/{asset_id}';
};

export type DeleteMeldingByMeldingIdAssetByAssetIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMeldingByMeldingIdAssetByAssetIdError = DeleteMeldingByMeldingIdAssetByAssetIdErrors[keyof DeleteMeldingByMeldingIdAssetByAssetIdErrors];

export type DeleteMeldingByMeldingIdAssetByAssetIdResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMeldingByMeldingIdNextPossibleStatesData = {
    body?: never;
    path: {
        /**
         * Melding Id
         *
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/next_possible_states';
};

export type GetMeldingByMeldingIdNextPossibleStatesErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdNextPossibleStatesError = GetMeldingByMeldingIdNextPossibleStatesErrors[keyof GetMeldingByMeldingIdNextPossibleStatesErrors];

export type GetMeldingByMeldingIdNextPossibleStatesResponses = {
    /**
     * Successful Response
     */
    200: StatesOutput;
};

export type GetMeldingByMeldingIdNextPossibleStatesResponse = GetMeldingByMeldingIdNextPossibleStatesResponses[keyof GetMeldingByMeldingIdNextPossibleStatesResponses];

export type GetUserData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The limit
         */
        limit?: number;
        /**
         * The offset of the page
         */
        offset?: number | null;
        /**
         * Sort
         */
        sort?: string;
    };
    url: '/user/';
};

export type GetUserErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * Response User List User  Get
     *
     * Successful Response
     */
    200: Array<UserOutput>;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type PostUserData = {
    body: UserCreateInput;
    path?: never;
    query?: never;
    url: '/user/';
};

export type PostUserErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Conflict, a uniqueness error occurred
     */
    409: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostUserError = PostUserErrors[keyof PostUserErrors];

export type PostUserResponses = {
    /**
     * Successful Response
     */
    201: UserOutput;
};

export type PostUserResponse = PostUserResponses[keyof PostUserResponses];

export type DeleteUserByUserIdData = {
    body?: never;
    path: {
        /**
         * User Id
         *
         * The id of the user.
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type DeleteUserByUserIdErrors = {
    /**
     * Delete own account
     */
    400: unknown;
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserByUserIdError = DeleteUserByUserIdErrors[keyof DeleteUserByUserIdErrors];

export type DeleteUserByUserIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserByUserIdResponse = DeleteUserByUserIdResponses[keyof DeleteUserByUserIdResponses];

export type GetUserByUserIdData = {
    body?: never;
    path: {
        /**
         * User Id
         *
         * The id of the user.
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type GetUserByUserIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByUserIdError = GetUserByUserIdErrors[keyof GetUserByUserIdErrors];

export type GetUserByUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type GetUserByUserIdResponse = GetUserByUserIdResponses[keyof GetUserByUserIdResponses];

export type PatchUserByUserIdData = {
    body: UserUpdateInput;
    path: {
        /**
         * User Id
         *
         * The id of the user.
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type PatchUserByUserIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Conflict, a uniqueness error occurred
     */
    409: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUserByUserIdError = PatchUserByUserIdErrors[keyof PatchUserByUserIdErrors];

export type PatchUserByUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type PatchUserByUserIdResponse = PatchUserByUserIdResponses[keyof PatchUserByUserIdResponses];

export type GetFormData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The limit
         */
        limit?: number;
        /**
         * The offset of the page
         */
        offset?: number | null;
        /**
         * Sort
         */
        sort?: string;
    };
    url: '/form/';
};

export type GetFormErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFormError = GetFormErrors[keyof GetFormErrors];

export type GetFormResponses = {
    /**
     * Response Form List Form  Get
     *
     * Successful Response
     */
    200: Array<SimpleFormOutput>;
};

export type GetFormResponse = GetFormResponses[keyof GetFormResponses];

export type PostFormData = {
    body: FormInput;
    path?: never;
    query?: never;
    url: '/form/';
};

export type PostFormErrors = {
    /**
     * Providing a classification id that does not exist
     */
    400: unknown;
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostFormError = PostFormErrors[keyof PostFormErrors];

export type PostFormResponses = {
    /**
     * Successful Response
     */
    201: FormOutput;
};

export type PostFormResponse = PostFormResponses[keyof PostFormResponses];

export type DeleteFormByFormIdData = {
    body?: never;
    path: {
        /**
         * Form Id
         *
         * The id of the form.
         */
        form_id: number;
    };
    query?: never;
    url: '/form/{form_id}';
};

export type DeleteFormByFormIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFormByFormIdError = DeleteFormByFormIdErrors[keyof DeleteFormByFormIdErrors];

export type DeleteFormByFormIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteFormByFormIdResponse = DeleteFormByFormIdResponses[keyof DeleteFormByFormIdResponses];

export type GetFormByFormIdData = {
    body?: never;
    path: {
        /**
         * Form Id
         *
         * The id of the form.
         */
        form_id: number;
    };
    query?: never;
    url: '/form/{form_id}';
};

export type GetFormByFormIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFormByFormIdError = GetFormByFormIdErrors[keyof GetFormByFormIdErrors];

export type GetFormByFormIdResponses = {
    /**
     * Successful Response
     */
    200: FormOutput;
};

export type GetFormByFormIdResponse = GetFormByFormIdResponses[keyof GetFormByFormIdResponses];

export type PutFormByFormIdData = {
    body: FormInput;
    path: {
        /**
         * Form Id
         *
         * The id of the form.
         */
        form_id: number;
    };
    query?: never;
    url: '/form/{form_id}';
};

export type PutFormByFormIdErrors = {
    /**
     * Providing a classification id that does not exist
     */
    400: unknown;
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutFormByFormIdError = PutFormByFormIdErrors[keyof PutFormByFormIdErrors];

export type PutFormByFormIdResponses = {
    /**
     * Successful Response
     */
    200: FormOutput;
};

export type PutFormByFormIdResponse = PutFormByFormIdResponses[keyof PutFormByFormIdResponses];

export type GetFormClassificationByClassificationIdData = {
    body?: never;
    path: {
        /**
         * Classification Id
         *
         * The id of the classification that the form belongs to.
         */
        classification_id: number;
    };
    query?: never;
    url: '/form/classification/{classification_id}';
};

export type GetFormClassificationByClassificationIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFormClassificationByClassificationIdError = GetFormClassificationByClassificationIdErrors[keyof GetFormClassificationByClassificationIdErrors];

export type GetFormClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    200: FormOutput;
};

export type GetFormClassificationByClassificationIdResponse = GetFormClassificationByClassificationIdResponses[keyof GetFormClassificationByClassificationIdResponses];

export type GetStaticFormByStaticFormIdData = {
    body?: never;
    path: {
        /**
         * Static Form Id
         *
         * The id of the static form.
         */
        static_form_id: number;
    };
    query?: never;
    url: '/static-form/{static_form_id}';
};

export type GetStaticFormByStaticFormIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStaticFormByStaticFormIdError = GetStaticFormByStaticFormIdErrors[keyof GetStaticFormByStaticFormIdErrors];

export type GetStaticFormByStaticFormIdResponses = {
    /**
     * Successful Response
     */
    200: StaticFormOutput;
};

export type GetStaticFormByStaticFormIdResponse = GetStaticFormByStaticFormIdResponses[keyof GetStaticFormByStaticFormIdResponses];

export type PutStaticFormByStaticFormIdData = {
    body: StaticFormInput;
    path: {
        /**
         * Static Form Id
         *
         * The id of the static form.
         */
        static_form_id: number;
    };
    query?: never;
    url: '/static-form/{static_form_id}';
};

export type PutStaticFormByStaticFormIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutStaticFormByStaticFormIdError = PutStaticFormByStaticFormIdErrors[keyof PutStaticFormByStaticFormIdErrors];

export type PutStaticFormByStaticFormIdResponses = {
    /**
     * Successful Response
     */
    200: StaticFormOutput;
};

export type PutStaticFormByStaticFormIdResponse = PutStaticFormByStaticFormIdResponses[keyof PutStaticFormByStaticFormIdResponses];

export type GetStaticFormData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The limit
         */
        limit?: number;
        /**
         * The offset of the page
         */
        offset?: number | null;
        /**
         * Sort
         */
        sort?: string;
    };
    url: '/static-form/';
};

export type GetStaticFormErrors = {
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStaticFormError = GetStaticFormErrors[keyof GetStaticFormErrors];

export type GetStaticFormResponses = {
    /**
     * Response Static Form List Static Form  Get
     *
     * Successful Response
     */
    200: Array<SimpleStaticFormOutput>;
};

export type GetStaticFormResponse = GetStaticFormResponses[keyof GetStaticFormResponses];

export type GetAssetTypeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The limit
         */
        limit?: number;
        /**
         * The offset of the page
         */
        offset?: number | null;
        /**
         * Sort
         */
        sort?: string;
    };
    url: '/asset-type/';
};

export type GetAssetTypeErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAssetTypeError = GetAssetTypeErrors[keyof GetAssetTypeErrors];

export type GetAssetTypeResponses = {
    /**
     * Response Asset Type List Asset Type  Get
     *
     * Successful Response
     */
    200: Array<AssetTypeOutput>;
};

export type GetAssetTypeResponse = GetAssetTypeResponses[keyof GetAssetTypeResponses];

export type PostAssetTypeData = {
    body: AssetTypeInput;
    path?: never;
    query?: never;
    url: '/asset-type/';
};

export type PostAssetTypeErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Conflict, a uniqueness error occurred
     */
    409: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAssetTypeError = PostAssetTypeErrors[keyof PostAssetTypeErrors];

export type PostAssetTypeResponses = {
    /**
     * Successful Response
     */
    201: AssetTypeOutput;
};

export type PostAssetTypeResponse = PostAssetTypeResponses[keyof PostAssetTypeResponses];

export type DeleteAssetTypeByAssetTypeIdData = {
    body?: never;
    path: {
        /**
         * Asset Type Id
         *
         * The asset type id.
         */
        asset_type_id: number;
    };
    query?: never;
    url: '/asset-type/{asset_type_id}';
};

export type DeleteAssetTypeByAssetTypeIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteAssetTypeByAssetTypeIdError = DeleteAssetTypeByAssetTypeIdErrors[keyof DeleteAssetTypeByAssetTypeIdErrors];

export type DeleteAssetTypeByAssetTypeIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteAssetTypeByAssetTypeIdResponse = DeleteAssetTypeByAssetTypeIdResponses[keyof DeleteAssetTypeByAssetTypeIdResponses];

export type GetAssetTypeByAssetTypeIdData = {
    body?: never;
    path: {
        /**
         * Asset Type Id
         *
         * The asset type id.
         */
        asset_type_id: number;
    };
    query?: never;
    url: '/asset-type/{asset_type_id}';
};

export type GetAssetTypeByAssetTypeIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAssetTypeByAssetTypeIdError = GetAssetTypeByAssetTypeIdErrors[keyof GetAssetTypeByAssetTypeIdErrors];

export type GetAssetTypeByAssetTypeIdResponses = {
    /**
     * Successful Response
     */
    200: AssetTypeOutput;
};

export type GetAssetTypeByAssetTypeIdResponse = GetAssetTypeByAssetTypeIdResponses[keyof GetAssetTypeByAssetTypeIdResponses];

export type PatchAssetTypeByAssetTypeIdData = {
    body: AssetTypeUpdateInput;
    path: {
        /**
         * Asset Type Id
         *
         * The asset type id.
         */
        asset_type_id: number;
    };
    query?: never;
    url: '/asset-type/{asset_type_id}';
};

export type PatchAssetTypeByAssetTypeIdErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Conflict, a uniqueness error occurred
     */
    409: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchAssetTypeByAssetTypeIdError = PatchAssetTypeByAssetTypeIdErrors[keyof PatchAssetTypeByAssetTypeIdErrors];

export type PatchAssetTypeByAssetTypeIdResponses = {
    /**
     * Successful Response
     */
    200: AssetTypeOutput;
};

export type PatchAssetTypeByAssetTypeIdResponse = PatchAssetTypeByAssetTypeIdResponses[keyof PatchAssetTypeByAssetTypeIdResponses];

export type GetWfsByNameData = {
    body?: never;
    path: {
        /**
         * Name
         *
         * The name of the asset type.
         */
        name: string;
    };
    query?: {
        /**
         * Type Names
         */
        type_names?: string;
        /**
         * Count
         */
        count?: number;
        /**
         * Srs Name
         */
        srs_name?: string;
        /**
         * Output Format
         */
        output_format?: 'application/json';
        /**
         * Service
         */
        service?: 'WFS';
        /**
         * Version
         */
        version?: string;
        /**
         * Request
         */
        request?: 'GetFeature';
        /**
         * Filter
         */
        filter?: string | null;
    };
    url: '/wfs/{name}';
};

export type GetWfsByNameErrors = {
    /**
     * ResponseWithDetail
     *
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * ResponseWithDetail
     *
     * Not Found
     */
    404: {
        /**
         * Detail
         */
        detail: string;
    };
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWfsByNameError = GetWfsByNameErrors[keyof GetWfsByNameErrors];

export type GetWfsByNameResponses = {
    /**
     * Successful Response
     */
    200: FeatureCollection;
};

export type GetWfsByNameResponse = GetWfsByNameResponses[keyof GetWfsByNameResponses];
