// This file is auto-generated by @hey-api/openapi-ts

export type Add = {
    '+': Array<number | number | string | Var>;
};

export type AllInput = {
    all: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type AllOutput = {
    all: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type AndInput = {
    and: Array<boolean | number | number | string | Array<null> | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var>;
};

export type AndOutput = {
    and: Array<boolean | number | number | string | Array<null> | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var>;
};

export type AnswerInput = {
    text: string;
};

export type AnswerOutput = {
    id: number;
    created_at: string;
    updated_at: string;
};

export type AnswerQuestionOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    text: string;
    question: QuestionOutput;
};

export type AttachmentOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    original_filename: string;
};

export type AttachmentTypes = 'original' | 'optimized' | 'thumbnail';

export type BaseModel = {
    [key: string]: unknown;
};

export type BodyMeldingAttachmentMeldingMeldingIdAttachmentPost = {
    file: Blob | File;
};

export type Cat = {
    cat: number | number | string | boolean | Array<number | number | string | boolean>;
};

export type ClassificationInput = {
    name: string;
};

export type ClassificationOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    name: string;
    form?: number | null;
};

export type Divide = {
    '/': [
        number | number | string,
        number | number | string
    ];
};

export type Equals = {
    '==': [
        unknown,
        unknown
    ];
};

export type FilterInput = {
    filter: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type FilterOutput = {
    filter: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type FormCheckboxComponentInput = {
    label: string;
    description: string | null;
    key: string;
    type?: FormIoComponentTypeEnum;
    input: boolean;
    validate?: FormComponentInputValidate | null;
    values: Array<FormComponentValueInput>;
};

export type FormCheckboxComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    values: Array<FormComponentValueOutput>;
    question: number;
};

export type FormComponentInputValidate = {
    json?: Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | null;
    required?: boolean;
};

export type FormComponentOutputValidate = {
    json?: Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var | null;
    required: boolean;
};

export type FormComponentValueInput = {
    label: string;
    value: string;
};

export type FormComponentValueOutput = {
    label: string;
    value: string;
    position: number;
};

export type FormInput = {
    title: string;
    display: FormIoFormDisplayEnum;
    components: Array<FormPanelComponentInput | FormTextAreaComponentInput | FormTextFieldComponentInput | FormRadioComponentInput | FormCheckboxComponentInput | FormSelectComponentInput>;
    classification?: number | null;
};

/**
 * The value of the type field
 */
export type FormIoComponentTypeEnum = 'panel' | 'textarea' | 'textfield' | 'selectboxes' | 'radio' | 'select';

/**
 * The value of the display field on the form can be one of the following:
 * - form
 * - wizard
 * - pdf
 */
export type FormIoFormDisplayEnum = 'form' | 'wizard' | 'pdf';

export type FormOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    title: string;
    display: string;
    classification?: number | null;
    components: Array<FormPanelComponentOutput | FormTextAreaComponentOutput | FormTextFieldInputComponentOutput | FormCheckboxComponentOutput | FormRadioComponentOutput | FormSelectComponentOutput>;
};

export type FormPanelComponentInput = {
    label: string;
    title: string;
    key: string;
    type?: FormIoComponentTypeEnum;
    input?: boolean;
    components: Array<FormTextAreaComponentInput | FormTextFieldComponentInput | FormRadioComponentInput | FormCheckboxComponentInput | FormSelectComponentInput>;
};

export type FormPanelComponentOutput = {
    title: string;
    label: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    components: Array<FormTextAreaComponentOutput | FormTextFieldInputComponentOutput | FormCheckboxComponentOutput | FormRadioComponentOutput | FormSelectComponentOutput>;
};

export type FormRadioComponentInput = {
    label: string;
    description: string | null;
    key: string;
    type?: FormIoComponentTypeEnum;
    input: boolean;
    validate?: FormComponentInputValidate | null;
    values: Array<FormComponentValueInput>;
};

export type FormRadioComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    values: Array<FormComponentValueOutput>;
    question: number;
};

export type FormSelectComponentDataInput = {
    values: Array<FormComponentValueInput>;
};

export type FormSelectComponentDataOutput = {
    values: Array<FormComponentValueOutput>;
};

export type FormSelectComponentInput = {
    label: string;
    description: string | null;
    key: string;
    type?: FormIoComponentTypeEnum;
    input: boolean;
    validate?: FormComponentInputValidate | null;
    widget: string;
    placeholder: string;
    data: FormSelectComponentDataInput;
};

export type FormSelectComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    widget: string;
    placeholder: string;
    data: FormSelectComponentDataOutput;
    question: number;
};

export type FormTextAreaComponentInput = {
    label: string;
    description: string | null;
    key: string;
    type?: FormIoComponentTypeEnum;
    input: boolean;
    validate?: FormComponentInputValidate | null;
    autoExpand: boolean;
    maxCharCount?: number | null;
};

export type FormTextAreaComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    autoExpand: boolean;
    maxCharCount: number | null;
    question: number;
};

export type FormTextFieldComponentInput = {
    label: string;
    description: string | null;
    key: string;
    type?: FormIoComponentTypeEnum;
    input: boolean;
    validate?: FormComponentInputValidate | null;
};

export type FormTextFieldInputComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    question: number;
};

export type GeoJsonInput = {
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    type: 'Feature';
    geometry: Point | null;
    properties: {
        [key: string]: unknown;
    } | BaseModel | null;
    id?: number | string | null;
};

export type GeoJsonOutput = {
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    type: 'Feature';
    geometry: Point | null;
    properties: {
        [key: string]: unknown;
    } | BaseModel | null;
    id?: number | string | null;
};

export type GreaterThan = {
    '>': [
        number | number | string | Var,
        number | number | string
    ];
};

export type GreaterThanOrEqual = {
    '>=': [
        number | number | string | Var,
        number | number | string
    ];
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type If = {
    if: Array<unknown>;
};

export type InInput = {
    in: [
        number | string | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var,
        Array<number | string> | string
    ];
};

export type InOutput = {
    in: [
        number | string | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var,
        Array<number | string> | string
    ];
};

export type LessThan = {
    '<': [
        number | number | string | Var,
        number | number | string
    ] | [
        number | number,
        number | number,
        number | number
    ];
};

export type LessThanOrEqual = {
    '<=': [
        number | number | string,
        number | number | string
    ] | [
        number | number,
        number | number,
        number | number
    ];
};

export type Log = {
    log: number | number | string | boolean | Array<number | number | string | boolean>;
};

export type MapInput = {
    map: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type MapOutput = {
    map: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type Max = {
    max: Array<number | number>;
};

export type MeldingContactInput = {
    email?: string | null;
    phone?: string | null;
};

export type MeldingCreateOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    text: string;
    state: string;
    classification?: number | null;
    geo_location?: GeoJsonOutput | null;
    email?: string | null;
    phone?: string | null;
    token: string;
};

export type MeldingInput = {
    text: string;
};

export type MeldingOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    text: string;
    state: string;
    classification?: number | null;
    geo_location?: GeoJsonOutput | null;
    email?: string | null;
    phone?: string | null;
};

export type Merge = {
    merge: unknown;
};

export type Min = {
    min: Array<number | number>;
};

export type Missing = {
    missing: Array<string> | string | Merge;
};

export type MissingSome = {
    missing_some: [
        number,
        Array<string>
    ];
};

export type Modulo = {
    '%': [
        number | number | string | Var,
        number | number | string
    ];
};

export type Multiply = {
    '*': Array<number | number | string | Var>;
};

export type NoneInput = {
    none: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type NoneOutput = {
    none: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type Not = {
    '!': [
        boolean | number | number | string
    ] | boolean | number | number | string | [
        Array<null>
    ];
};

export type NotEquals = {
    '!=': [
        unknown,
        unknown
    ];
};

export type NotNot = {
    '!!': [
        number | number | string | Array<null> | boolean
    ] | number | number | string | boolean;
};

export type OrInput = {
    or: Array<boolean | number | number | string | Array<null> | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var>;
};

export type OrOutput = {
    or: Array<boolean | number | number | string | Array<null> | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var>;
};

/**
 * Point Model
 */
export type Point = {
    bbox?: [
        number,
        number,
        number,
        number
    ] | [
        number,
        number,
        number,
        number,
        number,
        number
    ] | null;
    type: 'Point';
    coordinates: Position2D | Position3D;
};

export type Position2D = [
    number,
    number
];

export type Position3D = [
    number,
    number,
    number
];

export type QuestionOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    text: string;
};

export type ReduceInput = {
    reduce: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var,
        unknown
    ];
};

export type ReduceOutput = {
    reduce: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var,
        unknown
    ];
};

export type SimpleFormOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    title: string;
    display: string;
    classification?: number | null;
};

export type SimpleStaticFormOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    title: string;
    display: string;
    type: string;
};

export type SomeInput = {
    some: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterInput | MapInput,
        boolean | Add | AllInput | AndInput | Cat | Divide | Equals | FilterInput | GreaterThan | GreaterThanOrEqual | If | InInput | LessThan | LessThanOrEqual | Log | MapInput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneInput | Not | NotEquals | NotNot | OrInput | ReduceInput | SomeInput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type SomeOutput = {
    some: [
        Array<unknown> | Var | Missing | MissingSome | If | Merge | FilterOutput | MapOutput,
        boolean | Add | AllOutput | AndOutput | Cat | Divide | Equals | FilterOutput | GreaterThan | GreaterThanOrEqual | If | InOutput | LessThan | LessThanOrEqual | Log | MapOutput | Max | Merge | Min | Missing | MissingSome | Modulo | Multiply | NoneOutput | Not | NotEquals | NotNot | OrOutput | ReduceOutput | SomeOutput | StrictEquals | StrictNotEquals | Substr | Subtract | Var
    ];
};

export type StaticFormCheckboxComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    values: Array<FormComponentValueOutput>;
};

export type StaticFormInput = {
    title: string;
    display: FormIoFormDisplayEnum;
    components: Array<FormPanelComponentInput | FormTextAreaComponentInput | FormTextFieldComponentInput | FormRadioComponentInput | FormCheckboxComponentInput | FormSelectComponentInput>;
};

export type StaticFormOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    title: string;
    display: string;
    type: string;
    components: Array<StaticFormPanelComponentOutput | StaticFormTextAreaComponentOutput | StaticFormTextFieldInputComponentOutput | StaticFormCheckboxComponentOutput | StaticFormRadioComponentOutput | StaticFormSelectComponentOutput>;
};

export type StaticFormPanelComponentOutput = {
    title: string;
    label: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    components: Array<StaticFormTextAreaComponentOutput | StaticFormTextFieldInputComponentOutput | StaticFormCheckboxComponentOutput | StaticFormRadioComponentOutput | StaticFormSelectComponentOutput>;
};

export type StaticFormRadioComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    values: Array<FormComponentValueOutput>;
};

export type StaticFormSelectComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    widget: string;
    placeholder: string;
    data: FormSelectComponentDataOutput;
};

export type StaticFormTextAreaComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
    autoExpand: boolean;
    maxCharCount: number | null;
};

export type StaticFormTextFieldInputComponentOutput = {
    label: string;
    description: string;
    key: string;
    type: string;
    input: boolean;
    position: number;
    validate?: FormComponentOutputValidate | null;
};

export type StrictEquals = {
    '===': [
        unknown,
        unknown
    ];
};

export type StrictNotEquals = {
    '!==': [
        unknown,
        unknown
    ];
};

export type Substr = {
    substr: [
        string,
        number
    ] | [
        string,
        number,
        number
    ];
};

export type Subtract = {
    '-': [
        number | number | string
    ] | [
        number | number | string,
        number | number | string
    ];
};

export type UserCreateInput = {
    username: string;
    email: string;
};

export type UserOutput = {
    id: number;
    created_at: string;
    updated_at: string;
    email: string;
    username: string;
};

export type UserUpdateInput = {
    username?: string | null;
    email?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type Var = {
    var: [
        string
    ] | string | [
        string,
        unknown
    ] | number | number | Array<null> | null;
};

export type GetClassificationData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number | null;
        sort?: string;
    };
    url: '/classification/';
};

export type GetClassificationErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClassificationError = GetClassificationErrors[keyof GetClassificationErrors];

export type GetClassificationResponses = {
    /**
     * Successful Response
     */
    200: Array<ClassificationOutput>;
};

export type GetClassificationResponse = GetClassificationResponses[keyof GetClassificationResponses];

export type PostClassificationData = {
    body: ClassificationInput;
    path?: never;
    query?: never;
    url: '/classification/';
};

export type PostClassificationErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Conflict, a uniqueness error occurred
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostClassificationError = PostClassificationErrors[keyof PostClassificationErrors];

export type PostClassificationResponses = {
    /**
     * Successful Response
     */
    201: ClassificationOutput;
};

export type PostClassificationResponse = PostClassificationResponses[keyof PostClassificationResponses];

export type DeleteClassificationByClassificationIdData = {
    body?: never;
    path: {
        /**
         * The classification id.
         */
        classification_id: number;
    };
    query?: never;
    url: '/classification/{classification_id}';
};

export type DeleteClassificationByClassificationIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteClassificationByClassificationIdError = DeleteClassificationByClassificationIdErrors[keyof DeleteClassificationByClassificationIdErrors];

export type DeleteClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteClassificationByClassificationIdResponse = DeleteClassificationByClassificationIdResponses[keyof DeleteClassificationByClassificationIdResponses];

export type GetClassificationByClassificationIdData = {
    body?: never;
    path: {
        /**
         * The classification id.
         */
        classification_id: number;
    };
    query?: never;
    url: '/classification/{classification_id}';
};

export type GetClassificationByClassificationIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetClassificationByClassificationIdError = GetClassificationByClassificationIdErrors[keyof GetClassificationByClassificationIdErrors];

export type GetClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    200: ClassificationOutput;
};

export type GetClassificationByClassificationIdResponse = GetClassificationByClassificationIdResponses[keyof GetClassificationByClassificationIdResponses];

export type PatchClassificationByClassificationIdData = {
    body: ClassificationInput;
    path: {
        /**
         * The classification id.
         */
        classification_id: number;
    };
    query?: never;
    url: '/classification/{classification_id}';
};

export type PatchClassificationByClassificationIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Conflict, a uniqueness error occurred
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchClassificationByClassificationIdError = PatchClassificationByClassificationIdErrors[keyof PatchClassificationByClassificationIdErrors];

export type PatchClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    200: ClassificationOutput;
};

export type PatchClassificationByClassificationIdResponse = PatchClassificationByClassificationIdResponses[keyof PatchClassificationByClassificationIdResponses];

export type GetMeldingData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number | null;
        sort?: string;
    };
    url: '/melding/';
};

export type GetMeldingErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingError = GetMeldingErrors[keyof GetMeldingErrors];

export type GetMeldingResponses = {
    /**
     * Successful Response
     */
    200: Array<MeldingOutput>;
};

export type GetMeldingResponse = GetMeldingResponses[keyof GetMeldingResponses];

export type PostMeldingData = {
    body: MeldingInput;
    path?: never;
    query?: never;
    url: '/melding/';
};

export type PostMeldingErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingError = PostMeldingErrors[keyof PostMeldingErrors];

export type PostMeldingResponses = {
    /**
     * Successful Response
     */
    201: MeldingCreateOutput;
};

export type PostMeldingResponse = PostMeldingResponses[keyof PostMeldingResponses];

export type GetMeldingByMeldingIdData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}';
};

export type GetMeldingByMeldingIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdError = GetMeldingByMeldingIdErrors[keyof GetMeldingByMeldingIdErrors];

export type GetMeldingByMeldingIdResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type GetMeldingByMeldingIdResponse = GetMeldingByMeldingIdResponses[keyof GetMeldingByMeldingIdResponses];

export type PatchMeldingByMeldingIdData = {
    body: MeldingInput;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}';
};

export type PatchMeldingByMeldingIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchMeldingByMeldingIdError = PatchMeldingByMeldingIdErrors[keyof PatchMeldingByMeldingIdErrors];

export type PatchMeldingByMeldingIdResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PatchMeldingByMeldingIdResponse = PatchMeldingByMeldingIdResponses[keyof PatchMeldingByMeldingIdResponses];

export type GetMeldingByMeldingIdMelderData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/melder';
};

export type GetMeldingByMeldingIdMelderErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdMelderError = GetMeldingByMeldingIdMelderErrors[keyof GetMeldingByMeldingIdMelderErrors];

export type GetMeldingByMeldingIdMelderResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type GetMeldingByMeldingIdMelderResponse = GetMeldingByMeldingIdMelderResponses[keyof GetMeldingByMeldingIdMelderResponses];

export type PutMeldingByMeldingIdAnswerQuestionsData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/answer_questions';
};

export type PutMeldingByMeldingIdAnswerQuestionsErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdAnswerQuestionsResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdAnswerQuestionsResponse = PutMeldingByMeldingIdAnswerQuestionsResponses[keyof PutMeldingByMeldingIdAnswerQuestionsResponses];

export type PutMeldingByMeldingIdAddAttachmentsData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/add_attachments';
};

export type PutMeldingByMeldingIdAddAttachmentsErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdAddAttachmentsResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdAddAttachmentsResponse = PutMeldingByMeldingIdAddAttachmentsResponses[keyof PutMeldingByMeldingIdAddAttachmentsResponses];

export type PutMeldingByMeldingIdSubmitLocationData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/submit_location';
};

export type PutMeldingByMeldingIdSubmitLocationErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdSubmitLocationResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdSubmitLocationResponse = PutMeldingByMeldingIdSubmitLocationResponses[keyof PutMeldingByMeldingIdSubmitLocationResponses];

export type PutMeldingByMeldingIdSubmitData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/submit';
};

export type PutMeldingByMeldingIdSubmitErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdSubmitResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdSubmitResponse = PutMeldingByMeldingIdSubmitResponses[keyof PutMeldingByMeldingIdSubmitResponses];

export type PutMeldingByMeldingIdProcessData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/process';
};

export type PutMeldingByMeldingIdProcessErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdProcessResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdProcessResponse = PutMeldingByMeldingIdProcessResponses[keyof PutMeldingByMeldingIdProcessResponses];

export type PutMeldingByMeldingIdCompleteData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query?: never;
    url: '/melding/{melding_id}/complete';
};

export type PutMeldingByMeldingIdCompleteErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdCompleteResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdCompleteResponse = PutMeldingByMeldingIdCompleteResponses[keyof PutMeldingByMeldingIdCompleteResponses];

export type PostMeldingByMeldingIdQuestionByQuestionIdData = {
    body: AnswerInput;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
        /**
         * The id of the question.
         */
        question_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/question/{question_id}';
};

export type PostMeldingByMeldingIdQuestionByQuestionIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostMeldingByMeldingIdQuestionByQuestionIdResponses = {
    /**
     * Successful Response
     */
    201: AnswerOutput;
};

export type PostMeldingByMeldingIdQuestionByQuestionIdResponse = PostMeldingByMeldingIdQuestionByQuestionIdResponses[keyof PostMeldingByMeldingIdQuestionByQuestionIdResponses];

export type PostMeldingByMeldingIdAttachmentData = {
    body: BodyMeldingAttachmentMeldingMeldingIdAttachmentPost;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/attachment';
};

export type PostMeldingByMeldingIdAttachmentErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Uploading attachment that is too large.
     */
    413: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingByMeldingIdAttachmentError = PostMeldingByMeldingIdAttachmentErrors[keyof PostMeldingByMeldingIdAttachmentErrors];

export type PostMeldingByMeldingIdAttachmentResponses = {
    /**
     * Successful Response
     */
    200: AttachmentOutput;
};

export type PostMeldingByMeldingIdAttachmentResponse = PostMeldingByMeldingIdAttachmentResponses[keyof PostMeldingByMeldingIdAttachmentResponses];

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
        /**
         * The id of the attachment.
         */
        attachment_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
        /**
         * The type of the attachment to download.
         */
        type?: AttachmentTypes;
    };
    url: '/melding/{melding_id}/attachment/{attachment_id}/download';
};

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadError = GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadErrors[keyof GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadErrors];

export type GetMeldingByMeldingIdAttachmentByAttachmentIdDownloadResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMeldingByMeldingIdAttachmentsData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/attachments';
};

export type GetMeldingByMeldingIdAttachmentsErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAttachmentsError = GetMeldingByMeldingIdAttachmentsErrors[keyof GetMeldingByMeldingIdAttachmentsErrors];

export type GetMeldingByMeldingIdAttachmentsResponses = {
    /**
     * Successful Response
     */
    200: Array<AttachmentOutput>;
};

export type GetMeldingByMeldingIdAttachmentsResponse = GetMeldingByMeldingIdAttachmentsResponses[keyof GetMeldingByMeldingIdAttachmentsResponses];

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
        /**
         * The id of the attachment.
         */
        attachment_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/attachment/{attachment_id}';
};

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdError = DeleteMeldingByMeldingIdAttachmentByAttachmentIdErrors[keyof DeleteMeldingByMeldingIdAttachmentByAttachmentIdErrors];

export type DeleteMeldingByMeldingIdAttachmentByAttachmentIdResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PostMeldingByMeldingIdLocationData = {
    body: GeoJsonInput;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/location';
};

export type PostMeldingByMeldingIdLocationErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingByMeldingIdLocationError = PostMeldingByMeldingIdLocationErrors[keyof PostMeldingByMeldingIdLocationErrors];

export type PostMeldingByMeldingIdLocationResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PostMeldingByMeldingIdLocationResponse = PostMeldingByMeldingIdLocationResponses[keyof PostMeldingByMeldingIdLocationResponses];

export type PostMeldingByMeldingIdContactData = {
    body: MeldingContactInput;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/contact';
};

export type PostMeldingByMeldingIdContactErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostMeldingByMeldingIdContactError = PostMeldingByMeldingIdContactErrors[keyof PostMeldingByMeldingIdContactErrors];

export type PostMeldingByMeldingIdContactResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PostMeldingByMeldingIdContactResponse = PostMeldingByMeldingIdContactResponses[keyof PostMeldingByMeldingIdContactResponses];

export type PutMeldingByMeldingIdAddContactInfoData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/add_contact_info';
};

export type PutMeldingByMeldingIdAddContactInfoErrors = {
    /**
     * Transition not allowed from current state
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PutMeldingByMeldingIdAddContactInfoResponses = {
    /**
     * Successful Response
     */
    200: MeldingOutput;
};

export type PutMeldingByMeldingIdAddContactInfoResponse = PutMeldingByMeldingIdAddContactInfoResponses[keyof PutMeldingByMeldingIdAddContactInfoResponses];

export type GetMeldingByMeldingIdAnswersData = {
    body?: never;
    path: {
        /**
         * The id of the melding.
         */
        melding_id: number;
    };
    query: {
        /**
         * The token of the melding.
         */
        token: string;
    };
    url: '/melding/{melding_id}/answers';
};

export type GetMeldingByMeldingIdAnswersErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMeldingByMeldingIdAnswersError = GetMeldingByMeldingIdAnswersErrors[keyof GetMeldingByMeldingIdAnswersErrors];

export type GetMeldingByMeldingIdAnswersResponses = {
    /**
     * Successful Response
     */
    200: Array<AnswerQuestionOutput>;
};

export type GetMeldingByMeldingIdAnswersResponse = GetMeldingByMeldingIdAnswersResponses[keyof GetMeldingByMeldingIdAnswersResponses];

export type GetUserData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number | null;
        sort?: string;
    };
    url: '/user/';
};

export type GetUserErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * Successful Response
     */
    200: Array<UserOutput>;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type PostUserData = {
    body: UserCreateInput;
    path?: never;
    query?: never;
    url: '/user/';
};

export type PostUserErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Conflict, a uniqueness error occurred
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostUserError = PostUserErrors[keyof PostUserErrors];

export type PostUserResponses = {
    /**
     * Successful Response
     */
    201: UserOutput;
};

export type PostUserResponse = PostUserResponses[keyof PostUserResponses];

export type DeleteUserByUserIdData = {
    body?: never;
    path: {
        /**
         * The id of the user.
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type DeleteUserByUserIdErrors = {
    /**
     * Delete own account
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserByUserIdError = DeleteUserByUserIdErrors[keyof DeleteUserByUserIdErrors];

export type DeleteUserByUserIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserByUserIdResponse = DeleteUserByUserIdResponses[keyof DeleteUserByUserIdResponses];

export type GetUserByUserIdData = {
    body?: never;
    path: {
        /**
         * The id of the user.
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type GetUserByUserIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByUserIdError = GetUserByUserIdErrors[keyof GetUserByUserIdErrors];

export type GetUserByUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type GetUserByUserIdResponse = GetUserByUserIdResponses[keyof GetUserByUserIdResponses];

export type PatchUserByUserIdData = {
    body: UserUpdateInput;
    path: {
        /**
         * The id of the user.
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type PatchUserByUserIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Conflict, a uniqueness error occurred
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUserByUserIdError = PatchUserByUserIdErrors[keyof PatchUserByUserIdErrors];

export type PatchUserByUserIdResponses = {
    /**
     * Successful Response
     */
    200: UserOutput;
};

export type PatchUserByUserIdResponse = PatchUserByUserIdResponses[keyof PatchUserByUserIdResponses];

export type GetFormData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number | null;
        sort?: string;
    };
    url: '/form/';
};

export type GetFormErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFormError = GetFormErrors[keyof GetFormErrors];

export type GetFormResponses = {
    /**
     * Successful Response
     */
    200: Array<SimpleFormOutput>;
};

export type GetFormResponse = GetFormResponses[keyof GetFormResponses];

export type PostFormData = {
    body: FormInput;
    path?: never;
    query?: never;
    url: '/form/';
};

export type PostFormErrors = {
    /**
     * Providing a classification id that does not exist
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostFormError = PostFormErrors[keyof PostFormErrors];

export type PostFormResponses = {
    /**
     * Successful Response
     */
    201: FormOutput;
};

export type PostFormResponse = PostFormResponses[keyof PostFormResponses];

export type DeleteFormByFormIdData = {
    body?: never;
    path: {
        /**
         * The id of the form.
         */
        form_id: number;
    };
    query?: never;
    url: '/form/{form_id}';
};

export type DeleteFormByFormIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFormByFormIdError = DeleteFormByFormIdErrors[keyof DeleteFormByFormIdErrors];

export type DeleteFormByFormIdResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteFormByFormIdResponse = DeleteFormByFormIdResponses[keyof DeleteFormByFormIdResponses];

export type GetFormByFormIdData = {
    body?: never;
    path: {
        /**
         * The id of the form.
         */
        form_id: number;
    };
    query?: never;
    url: '/form/{form_id}';
};

export type GetFormByFormIdErrors = {
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFormByFormIdError = GetFormByFormIdErrors[keyof GetFormByFormIdErrors];

export type GetFormByFormIdResponses = {
    /**
     * Successful Response
     */
    200: FormOutput;
};

export type GetFormByFormIdResponse = GetFormByFormIdResponses[keyof GetFormByFormIdResponses];

export type PutFormByFormIdData = {
    body: FormInput;
    path: {
        /**
         * The id of the form.
         */
        form_id: number;
    };
    query?: never;
    url: '/form/{form_id}';
};

export type PutFormByFormIdErrors = {
    /**
     * Providing a classification id that does not exist
     */
    400: unknown;
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutFormByFormIdError = PutFormByFormIdErrors[keyof PutFormByFormIdErrors];

export type PutFormByFormIdResponses = {
    /**
     * Successful Response
     */
    200: FormOutput;
};

export type PutFormByFormIdResponse = PutFormByFormIdResponses[keyof PutFormByFormIdResponses];

export type GetFormClassificationByClassificationIdData = {
    body?: never;
    path: {
        /**
         * The id of the classification that the form belongs to.
         */
        classification_id: number;
    };
    query?: never;
    url: '/form/classification/{classification_id}';
};

export type GetFormClassificationByClassificationIdErrors = {
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFormClassificationByClassificationIdError = GetFormClassificationByClassificationIdErrors[keyof GetFormClassificationByClassificationIdErrors];

export type GetFormClassificationByClassificationIdResponses = {
    /**
     * Successful Response
     */
    200: FormOutput;
};

export type GetFormClassificationByClassificationIdResponse = GetFormClassificationByClassificationIdResponses[keyof GetFormClassificationByClassificationIdResponses];

export type GetStaticFormByStaticFormIdData = {
    body?: never;
    path: {
        /**
         * The id of the static form.
         */
        static_form_id: number;
    };
    query?: never;
    url: '/static-form/{static_form_id}';
};

export type GetStaticFormByStaticFormIdErrors = {
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStaticFormByStaticFormIdError = GetStaticFormByStaticFormIdErrors[keyof GetStaticFormByStaticFormIdErrors];

export type GetStaticFormByStaticFormIdResponses = {
    /**
     * Successful Response
     */
    200: StaticFormOutput;
};

export type GetStaticFormByStaticFormIdResponse = GetStaticFormByStaticFormIdResponses[keyof GetStaticFormByStaticFormIdResponses];

export type PutStaticFormByStaticFormIdData = {
    body: StaticFormInput;
    path: {
        /**
         * The id of the static form.
         */
        static_form_id: number;
    };
    query?: never;
    url: '/static-form/{static_form_id}';
};

export type PutStaticFormByStaticFormIdErrors = {
    /**
     * Unauthorized, perhaps the token was invalid or expired, or the user could not be found.
     */
    401: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutStaticFormByStaticFormIdError = PutStaticFormByStaticFormIdErrors[keyof PutStaticFormByStaticFormIdErrors];

export type PutStaticFormByStaticFormIdResponses = {
    /**
     * Successful Response
     */
    200: StaticFormOutput;
};

export type PutStaticFormByStaticFormIdResponse = PutStaticFormByStaticFormIdResponses[keyof PutStaticFormByStaticFormIdResponses];

export type GetStaticFormData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number | null;
        sort?: string;
    };
    url: '/static-form/';
};

export type GetStaticFormErrors = {
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStaticFormError = GetStaticFormErrors[keyof GetStaticFormErrors];

export type GetStaticFormResponses = {
    /**
     * Successful Response
     */
    200: Array<SimpleStaticFormOutput>;
};

export type GetStaticFormResponse = GetStaticFormResponses[keyof GetStaticFormResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};